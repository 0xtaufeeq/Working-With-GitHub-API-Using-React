import React, { Children, cloneElement, createElement } from 'react';
import { findDOMNode, createPortal } from 'react-dom';
import { Transition } from 'react-transition-group';

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

var globalModule = {"cursor-pointer":"_17_OS","selection-control-container":"_jzWXa","d-dummy":"_1TF7v"};

var getModuleClasses = function getModuleClasses(localModule, classNames) {
  var styles = _extends(_extends({}, localModule), globalModule);

  return classNames.replace(/^\s+|\s+$/g, '').split(/\s+/).map(function (cl) {
    return styles[cl.trim()];
  }).join(' ').trim();
};
var callCallback = function callCallback(callback, data) {
  if (callback && typeof callback === 'function') {
    callback(data);
  }
};
var pickKeys = function pickKeys(obj, keys) {
  var newObj = {};
  var keysLength = keys.length;

  for (var i = 0; i < keysLength; i++) {
    if (Object.prototype.hasOwnProperty.call(obj, keys[i])) {
      newObj[keys[i]] = obj[keys[i]];
    }
  }

  return newObj;
};
var uid = function uid() {
  return "_" + ((1 + Math.random()) * 0x10000 | 0).toString(8).substring(1) + "_";
};

var setCSSVariable = function setCSSVariable(element, variable, value) {
  if (element && value) {
    element.style.setProperty(variable, String(value));
  }
};
var overrideThemeVariables = function overrideThemeVariables(themeObject) {
  var root = document.querySelector(':root');
  var themeVariables = Object.keys(themeObject);

  if (root && themeObject) {
    themeVariables.forEach(function (themeVar) {
      var varValue = themeObject[themeVar];

      if (varValue && themeVar.startsWith('--')) {
        setCSSVariable(root, themeVar, varValue);
      }
    });
  }
};
var detectElementInDOM = function detectElementInDOM(path, element) {
  if (path === void 0) {
    path = [];
  }

  if (element === void 0) {
    element = 'null';
  }

  return path.map(function (elem) {
    return elem.nodeName;
  }).join('-').toLowerCase().includes(element.toLowerCase());
};
var findClickInside = function findClickInside(event, node) {
  var currentNode = event.target;

  try {
    do {
      if (currentNode === node) {
        return true;
      }

      currentNode = currentNode.parentNode;
    } while (currentNode);

    return false;
  } catch (err) {
    throw new Error(err);
  }
};

var isMyReactComponent = function isMyReactComponent(component) {
  var componentName = '';

  if (component && component.type && typeof component.type !== 'string') {
    componentName = component.type.displayName;
  }

  return componentName && componentName.includes('Nu');
};
var passDownProp = function passDownProp(children, props, propName) {
  return Children.map(children, function (child) {
    if (isMyReactComponent(child)) {
      var newProps = _extends({}, child.props);

      if (typeof propName === 'string') {
        newProps[propName] = child.props[propName] === undefined ? props[propName] : child.props[propName];
      } else if (Array.isArray(propName)) {
        propName.forEach(function (prop) {
          newProps[prop] = child.props[prop] === undefined ? props[prop] : child.props[prop];
        });
      }

      return cloneElement(child, newProps);
    } else {
      return child;
    }
  });
};

var withImage = function withImage(WrappedComponent, config) {
  var _class, _temp;

  return _temp = _class = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(withImage, _React$Component);

    function withImage(props) {
      var _this;

      _this = _React$Component.call(this, props) || this;
      _this.state = {
        loaded: false,
        height: 0,
        width: 0
      };
      return _this;
    }

    var _proto = withImage.prototype;

    _proto.setLoaded = function setLoaded() {
      var _this2 = this;

      var src = this.props.src;

      if (!src) {
        return null;
      }

      this.image = new Image();
      this.image.src = src;

      this.image.onload = function () {
        var _this2$image = _this2.image,
            width = _this2$image.width,
            height = _this2$image.height;

        _this2.setState(function (state) {
          return _extends(_extends({}, state), {}, {
            width: width,
            height: height,
            loaded: true
          });
        });
      };

      this.image.onerror = function () {
        _this2.setState(function (state) {
          return _extends(_extends({}, state), {}, {
            width: 0,
            height: 0,
            loaded: false
          });
        });
      };
    };

    _proto.componentWillMount = function componentWillMount() {
      this.setLoaded();
    };

    _proto.componentDidUpdate = function componentDidUpdate(_ref) {
      var src = _ref.src;

      if (this.props.src !== src) {
        this.setLoaded();
      }
    };

    _proto.componentWillUnmount = function componentWillUnmount() {
      if (this.image) {
        this.image.onerror = null;
        this.image.onload = null;
      }
    };

    _proto.render = function render() {
      var _this$state = this.state,
          loaded = _this$state.loaded,
          width = _this$state.width,
          height = _this$state.height;
      return /*#__PURE__*/React.createElement(WrappedComponent, _extends({}, this.props, {
        loaded: loaded,
        imageWidth: width,
        imageHeight: height
      }));
    };

    return withImage;
  }(React.Component), _class.displayName = "WithImage(" + (WrappedComponent.displayName || WrappedComponent.name || 'Component') + ")", _temp;
};

var withResize = function withResize(WrappedComponent, config) {
  var _class, _temp;

  if (config === void 0) {
    config = {};
  }

  return _temp = _class = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(withResize, _React$Component);

    function withResize(props) {
      var _this;

      _this = _React$Component.call(this, props) || this;

      _this.updateDimensions = function (dimensions) {
        _this.setState(_extends(_extends({}, _this.state), dimensions));
      };

      _this.state = {
        height: null,
        width: null
      };
      _this.node = null;
      _this.resizeObserver = null;
      _this.updateDimensions = _this.updateDimensions.bind(_assertThisInitialized(_this));
      return _this;
    }

    var _proto = withResize.prototype;

    _proto.componentDidMount = function componentDidMount() {
      var _this2 = this;

      var _config = config,
          onlyWidth = _config.onlyWidth,
          onlyHeight = _config.onlyHeight;
      var configNotActive = !onlyWidth && !onlyHeight;
      this.resizeObserver = new ResizeObserver(function (entries) {
        var _this2$state = _this2.state,
            currentWidth = _this2$state.width,
            currentHeight = _this2$state.height;
        entries.forEach(function (entry) {
          var _ref = entry && entry.contentRect || {},
              width = _ref.width,
              height = _ref.height;

          var isWidthChanged = currentWidth !== width;
          var isHeightChanged = currentHeight !== height;
          var isSizeChanged = isHeightChanged || isWidthChanged;

          if (onlyWidth && isWidthChanged) {
            _this2.updateDimensions({
              width: width
            });
          } else if (onlyHeight && isHeightChanged) {
            _this2.updateDimensions({
              height: height
            });
          } else if (isSizeChanged && configNotActive) {
            _this2.updateDimensions({
              width: width,
              height: height
            });
          }
        });
      });
      this.resizeObserver.observe(this.node);
    };

    _proto.componentWillUnmount = function componentWillUnmount() {
      if (this.resizeObserver) {
        this.resizeObserver.disconnect();
      }
    };

    _proto.getCurrentSize = function getCurrentSize() {
      var width = this.state.width;
      return width > 1904 ? 'xl' : width > 1264 ? 'lg' : width > 960 ? 'md' : width > 600 ? 'sm' : 'xs';
    };

    _proto.render = function render() {
      var _this3 = this;

      var _this$state = this.state,
          width = _this$state.width,
          height = _this$state.height;
      return /*#__PURE__*/React.createElement(WrappedComponent, _extends({
        ref: function ref(_ref2) {
          return _this3.node = findDOMNode(_ref2);
        },
        dimensions: {
          width: width,
          height: height
        },
        size: this.getCurrentSize()
      }, this.props));
    };

    return withResize;
  }(React.Component), _class.displayName = "WithResize(" + (WrappedComponent.displayName || WrappedComponent.name || 'Component') + ")", _temp;
};

var withClickOutside = function withClickOutside(WrappedComponent) {
  var _class, _temp;

  var componentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
  return _temp = _class = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(WithClickOutside, _React$Component);

    function WithClickOutside(props) {
      var _this;

      _this = _React$Component.call(this, props) || this;

      _this.handleClick = function (e) {
        var parentNode = findDOMNode(_this.node);
        var isClickInside = findClickInside(e, parentNode);

        if (isClickInside) {
          _this.clickHandler(e, 'Inside');
        } else {
          _this.clickHandler(e, 'Outside');
        }
      };

      _this.node = null;
      _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));
      return _this;
    }

    var _proto = WithClickOutside.prototype;

    _proto.componentDidMount = function componentDidMount() {
      document.addEventListener('click', this.handleClick);
    };

    _proto.componentWillUnmount = function componentWillUnmount() {
      document.removeEventListener('click', this.handleClick);
    };

    _proto.clickHandler = function clickHandler(e, type) {
      if (type === void 0) {
        type = 'Outside';
      }

      if (typeof this.node.props["handleClick" + type] === 'function') {
        this.node.props["handleClick" + type](e);
        return;
      }

      if (typeof this.node["handleClick" + type] === 'function') {
        this.node["handleClick" + type](e);
        return;
      }

      if (type === 'Outside') {
        throw new Error(componentName + ": needs a handleClickOutside function to handle outside clicks");
      }
    };

    _proto.render = function render() {
      var _this2 = this;

      return /*#__PURE__*/React.createElement(WrappedComponent, _extends({
        ref: function ref(_ref) {
          return _this2.node = _ref;
        }
      }, this.props));
    };

    return WithClickOutside;
  }(React.Component), _class.displayName = "WithClickOutside(" + componentName + ")", _temp;
};

var TransitionWrapper = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(TransitionWrapper, _React$Component);

  function TransitionWrapper(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.state = {
      updated: 0
    };
    _this.handleExit = _this.handleExit.bind(_assertThisInitialized(_this));
    _this.handleEnter = _this.handleEnter.bind(_assertThisInitialized(_this));
    _this.handleExited = _this.handleExited.bind(_assertThisInitialized(_this));
    _this.handleExiting = _this.handleExiting.bind(_assertThisInitialized(_this));
    _this.handleEntered = _this.handleEntered.bind(_assertThisInitialized(_this));
    _this.handleEntering = _this.handleEntering.bind(_assertThisInitialized(_this));
    return _this;
  }

  var _proto = TransitionWrapper.prototype;

  _proto.update = function update(data) {
    callCallback(this.props.onUpdate, data);
  };

  _proto.handleExit = function handleExit() {
    this.update('exit');
  };

  _proto.handleEnter = function handleEnter() {
    this.update('enter');
  };

  _proto.handleExited = function handleExited() {
    this.update('exited');
  };

  _proto.handleExiting = function handleExiting() {
    this.update('exiting');
  };

  _proto.handleEntered = function handleEntered() {
    this.update('entered');
  };

  _proto.handleEntering = function handleEntering() {
    this.update('entering');
  };

  _proto.componentDidMount = function componentDidMount() {
    this.setState({
      updated: 1
    });
  };

  _proto.render = function render() {
    var _this$props = this.props,
        children = _this$props.children,
        otherProps = _objectWithoutPropertiesLoose(_this$props, ["children", "onUpdate"]);

    return /*#__PURE__*/React.createElement(Transition, _extends({
      onExit: this.handleExit,
      onEnter: this.handleEnter,
      onExited: this.handleExited,
      onEntered: this.handleEntered,
      onExiting: this.handleExiting,
      onEntering: this.handleEntering
    }, otherProps), children);
  };

  return TransitionWrapper;
}(React.Component);

TransitionWrapper.displayName = 'NuTransitionWrapper';
TransitionWrapper.defaultProps = {
  timeout: 0
};

var CONTEXT_COLORS = ['success', 'info', 'warning', 'error'];
var SELECTION_CONTROLS = ['radio', 'checkbox', 'switch'];
var POSITIONS = ['top', 'right', 'bottom', 'left'];
var ALTERNATE_BUTONS = ['fab', 'icon', 'toggle'];
var SIZES = ['small', 'medium', 'large'];
var MOUSE_EVENTS = ['onClick', 'onMouseUp', 'onMouseOut', 'onMouseMove', 'onMouseDown', 'onMouseOver', 'onMouseEnter', 'onMouseLeave'];
var CARD_PASS_DOWN = ['dark', 'rounded', 'disabled', 'outlined', 'bordered'];
var CARD_CHILD_PASS_DOWN = ['dark', 'rounded', 'disabled'];
var CARD_HEAD_PASS_DOWN = ['dark', 'disabled'];
var CSS_DIMENSIONS = ['width', 'height', 'minWidth', 'maxWidth', 'minHeight', 'maxHeight'];

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}var AsyncMode=l;var ConcurrentMode=m;var ContextConsumer=k;var ContextProvider=h;var Element=c;var ForwardRef=n;var Fragment=e;var Lazy=t;var Memo=r;var Portal=d;
var Profiler=g;var StrictMode=f;var Suspense=p;var isAsyncMode=function(a){return A(a)||z(a)===l};var isConcurrentMode=A;var isContextConsumer=function(a){return z(a)===k};var isContextProvider=function(a){return z(a)===h};var isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};var isForwardRef=function(a){return z(a)===n};var isFragment=function(a){return z(a)===e};var isLazy=function(a){return z(a)===t};
var isMemo=function(a){return z(a)===r};var isPortal=function(a){return z(a)===d};var isProfiler=function(a){return z(a)===g};var isStrictMode=function(a){return z(a)===f};var isSuspense=function(a){return z(a)===p};
var isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};var typeOf=z;

var reactIs_production_min = {
	AsyncMode: AsyncMode,
	ConcurrentMode: ConcurrentMode,
	ContextConsumer: ContextConsumer,
	ContextProvider: ContextProvider,
	Element: Element,
	ForwardRef: ForwardRef,
	Fragment: Fragment,
	Lazy: Lazy,
	Memo: Memo,
	Portal: Portal,
	Profiler: Profiler,
	StrictMode: StrictMode,
	Suspense: Suspense,
	isAsyncMode: isAsyncMode,
	isConcurrentMode: isConcurrentMode,
	isContextConsumer: isContextConsumer,
	isContextProvider: isContextProvider,
	isElement: isElement,
	isForwardRef: isForwardRef,
	isFragment: isFragment,
	isLazy: isLazy,
	isMemo: isMemo,
	isPortal: isPortal,
	isProfiler: isProfiler,
	isStrictMode: isStrictMode,
	isSuspense: isSuspense,
	isValidElementType: isValidElementType,
	typeOf: typeOf
};

var reactIs_development = createCommonjsModule(function (module, exports) {



if (process.env.NODE_ENV !== "production") {
  (function() {

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
// (unstable) APIs that have been removed. Can we remove the symbols?

var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

function isValidElementType(type) {
  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
}

function typeOf(object) {
  if (typeof object === 'object' && object !== null) {
    var $$typeof = object.$$typeof;

    switch ($$typeof) {
      case REACT_ELEMENT_TYPE:
        var type = object.type;

        switch (type) {
          case REACT_ASYNC_MODE_TYPE:
          case REACT_CONCURRENT_MODE_TYPE:
          case REACT_FRAGMENT_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_SUSPENSE_TYPE:
            return type;

          default:
            var $$typeofType = type && type.$$typeof;

            switch ($$typeofType) {
              case REACT_CONTEXT_TYPE:
              case REACT_FORWARD_REF_TYPE:
              case REACT_LAZY_TYPE:
              case REACT_MEMO_TYPE:
              case REACT_PROVIDER_TYPE:
                return $$typeofType;

              default:
                return $$typeof;
            }

        }

      case REACT_PORTAL_TYPE:
        return $$typeof;
    }
  }

  return undefined;
} // AsyncMode is deprecated along with isAsyncMode

var AsyncMode = REACT_ASYNC_MODE_TYPE;
var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
var ContextConsumer = REACT_CONTEXT_TYPE;
var ContextProvider = REACT_PROVIDER_TYPE;
var Element = REACT_ELEMENT_TYPE;
var ForwardRef = REACT_FORWARD_REF_TYPE;
var Fragment = REACT_FRAGMENT_TYPE;
var Lazy = REACT_LAZY_TYPE;
var Memo = REACT_MEMO_TYPE;
var Portal = REACT_PORTAL_TYPE;
var Profiler = REACT_PROFILER_TYPE;
var StrictMode = REACT_STRICT_MODE_TYPE;
var Suspense = REACT_SUSPENSE_TYPE;
var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

function isAsyncMode(object) {
  {
    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
    }
  }

  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
}
function isConcurrentMode(object) {
  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
}
function isContextConsumer(object) {
  return typeOf(object) === REACT_CONTEXT_TYPE;
}
function isContextProvider(object) {
  return typeOf(object) === REACT_PROVIDER_TYPE;
}
function isElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}
function isForwardRef(object) {
  return typeOf(object) === REACT_FORWARD_REF_TYPE;
}
function isFragment(object) {
  return typeOf(object) === REACT_FRAGMENT_TYPE;
}
function isLazy(object) {
  return typeOf(object) === REACT_LAZY_TYPE;
}
function isMemo(object) {
  return typeOf(object) === REACT_MEMO_TYPE;
}
function isPortal(object) {
  return typeOf(object) === REACT_PORTAL_TYPE;
}
function isProfiler(object) {
  return typeOf(object) === REACT_PROFILER_TYPE;
}
function isStrictMode(object) {
  return typeOf(object) === REACT_STRICT_MODE_TYPE;
}
function isSuspense(object) {
  return typeOf(object) === REACT_SUSPENSE_TYPE;
}

exports.AsyncMode = AsyncMode;
exports.ConcurrentMode = ConcurrentMode;
exports.ContextConsumer = ContextConsumer;
exports.ContextProvider = ContextProvider;
exports.Element = Element;
exports.ForwardRef = ForwardRef;
exports.Fragment = Fragment;
exports.Lazy = Lazy;
exports.Memo = Memo;
exports.Portal = Portal;
exports.Profiler = Profiler;
exports.StrictMode = StrictMode;
exports.Suspense = Suspense;
exports.isAsyncMode = isAsyncMode;
exports.isConcurrentMode = isConcurrentMode;
exports.isContextConsumer = isContextConsumer;
exports.isContextProvider = isContextProvider;
exports.isElement = isElement;
exports.isForwardRef = isForwardRef;
exports.isFragment = isFragment;
exports.isLazy = isLazy;
exports.isMemo = isMemo;
exports.isPortal = isPortal;
exports.isProfiler = isProfiler;
exports.isStrictMode = isStrictMode;
exports.isSuspense = isSuspense;
exports.isValidElementType = isValidElementType;
exports.typeOf = typeOf;
  })();
}
});

var reactIs = createCommonjsModule(function (module) {

if (process.env.NODE_ENV === 'production') {
  module.exports = reactIs_production_min;
} else {
  module.exports = reactIs_development;
}
});

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

var ReactPropTypesSecret_1 = ReactPropTypesSecret;

var printWarning = function() {};

if (process.env.NODE_ENV !== 'production') {
  var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
  var loggedTypeFailures = {};
  var has = Function.call.bind(Object.prototype.hasOwnProperty);

  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error(
              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
            );
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning(
            (componentName || 'React class') + ': type specification of ' +
            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
            'You may have forgotten to pass an argument to the type checker ' +
            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
            'shape all require an argument).'
          );
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          printWarning(
            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
          );
        }
      }
    }
  }
}

/**
 * Resets warning cache when testing.
 *
 * @private
 */
checkPropTypes.resetWarningCache = function() {
  if (process.env.NODE_ENV !== 'production') {
    loggedTypeFailures = {};
  }
};

var checkPropTypes_1 = checkPropTypes;

var has$1 = Function.call.bind(Object.prototype.hasOwnProperty);
var printWarning$1 = function() {};

if (process.env.NODE_ENV !== 'production') {
  printWarning$1 = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker,
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret_1) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error(
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
          err.name = 'Invariant Violation';
          throw err;
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            printWarning$1(
              'You are manually calling a React.PropTypes validation ' +
              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!reactIs.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      if (process.env.NODE_ENV !== 'production') {
        if (arguments.length > 1) {
          printWarning$1(
            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
          );
        } else {
          printWarning$1('Invalid argument supplied to oneOf, expected an array.');
        }
      }
      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);
        if (type === 'symbol') {
          return String(value);
        }
        return value;
      });
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (has$1(propValue, key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? printWarning$1('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning$1(
          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
        );
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = objectAssign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError(
            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
          );
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // falsy value can't be a Symbol
    if (!propValue) {
      return false;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes_1;
  ReactPropTypes.resetWarningCache = checkPropTypes_1.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

function emptyFunction() {}
function emptyFunctionWithReset() {}
emptyFunctionWithReset.resetWarningCache = emptyFunction;

var factoryWithThrowingShims = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret_1) {
      // It is still safe when called from React.
      return;
    }
    var err = new Error(
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
    err.name = 'Invariant Violation';
    throw err;
  }  shim.isRequired = shim;
  function getShim() {
    return shim;
  }  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,

    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };

  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

var propTypes = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (process.env.NODE_ENV !== 'production') {
  var ReactIs = reactIs;

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = factoryWithThrowingShims();
}
});

var G_ANY = propTypes.any;
var G_FUNC = propTypes.func;
var G_BOOL = propTypes.bool;
var G_NODE = propTypes.node;
var G_ARR = propTypes.array;
var G_NUM = propTypes.number;
var G_OBJ = propTypes.object;
var G_STRING = propTypes.string;
var DEFAULT_PROPS = {
  style: {},
  className: ''
};
var DEFAULT_PROPS_TYPE = {
  dark: G_BOOL,
  style: G_OBJ,
  className: G_STRING
};
var SIZE_PROP = propTypes.oneOf(SIZES);
var POSITION_PROP = propTypes.oneOf(POSITIONS);
var CONTEXT_COLOR_TYPES = propTypes.oneOf(CONTEXT_COLORS);
var BUTTON_ALTERNATE_TYPES = propTypes.oneOf(ALTERNATE_BUTONS);
var SIZE_PROP_WITH_NUM = propTypes.oneOfType([SIZE_PROP, G_NUM]);
var SELECTION_CONTROL_TYPES = propTypes.oneOf(SELECTION_CONTROLS);
var TYPOGRAPHY_PROP_TYPES = _extends({
  disabled: G_BOOL,
  secondary: G_BOOL,
  component: G_STRING
}, DEFAULT_PROPS_TYPE);
var SELECTION_CONTROL_PROP_TYPES = _extends({
  value: G_ANY,
  id: G_STRING,
  name: G_STRING,
  label: G_STRING,
  checked: G_BOOL,
  color: G_STRING,
  onClick: G_FUNC,
  required: G_BOOL,
  disabled: G_BOOL,
  onChange: G_FUNC
}, DEFAULT_PROPS_TYPE);
var COMMON_CARD_DEFAULT_PROPS = {
  flat: false,
  inset: false,
  rounded: false,
  outlined: false,
  bordered: false
};
var CSS_DIMENSION_DEFAULT_PROPS = {
  width: G_NUM,
  height: G_NUM,
  minWidth: G_NUM,
  maxWidth: G_NUM,
  minHeight: G_NUM,
  maxHeight: G_NUM
};
var COMMON_CARD_PROPS = _extends({
  flat: G_BOOL,
  inset: G_BOOL,
  rounded: G_BOOL,
  outlined: G_BOOL,
  bordered: G_BOOL,
  elevation: G_NUM
}, CSS_DIMENSION_DEFAULT_PROPS);
var ALERT_PROP_TYPES = _extends(_extends(_extends({
  icon: G_NODE,
  dense: G_BOOL,
  color: G_STRING,
  closable: G_BOOL,
  closeIcon: G_NODE
}, COMMON_CARD_PROPS), DEFAULT_PROPS_TYPE), {}, {
  border: POSITION_PROP,
  type: CONTEXT_COLOR_TYPES
});
var CARD_PROP_TYPES = _extends(_extends({
  loading: G_BOOL,
  disabled: G_BOOL
}, COMMON_CARD_PROPS), DEFAULT_PROPS_TYPE);
var BUTTON_PROP_TYPES = _extends(_extends({
  text: G_BOOL,
  block: G_BOOL,
  active: G_BOOL,
  rounded: G_BOOL,
  size: SIZE_PROP,
  color: G_STRING,
  onClick: G_FUNC,
  noPress: G_BOOL,
  outlined: G_BOOL,
  bordered: G_BOOL,
  disabled: G_BOOL,
  onMouseOut: G_FUNC,
  bgColor: G_STRING,
  depressed: G_BOOL,
  onMouseOver: G_FUNC
}, DEFAULT_PROPS_TYPE), {}, {
  type: BUTTON_ALTERNATE_TYPES
});
var FAB_BUTTON_PROP_TYPES = _extends({
  top: G_BOOL,
  left: G_BOOL,
  right: G_BOOL,
  fixed: G_BOOL,
  bottom: G_BOOL,
  absolute: G_BOOL,
  animation: G_BOOL
}, BUTTON_PROP_TYPES);
var TEXT_FIELD_PROP_TYPES = {
  id: G_STRING,
  rules: G_ARR,
  width: G_NUM,
  dense: G_BOOL,
  label: G_NODE,
  height: G_NUM,
  name: G_STRING,
  type: G_STRING,
  hint: G_STRING,
  counter: G_NUM,
  append: G_NODE,
  prepend: G_NODE,
  rounded: G_BOOL,
  value: G_STRING,
  loading: G_BOOL,
  readonly: G_BOOL,
  disabled: G_BOOL,
  outlined: G_BOOL,
  bordered: G_BOOL,
  autofocus: G_BOOL,
  clearable: G_BOOL,
  hideExtra: G_BOOL,
  uncontrolled: G_BOOL,
  placeholder: G_STRING
};
var BUTTON_GROUP_VALUE = propTypes.oneOfType([propTypes.array, propTypes.string]);
var COMMON_PROGRESS_TYPES = {
  value: G_NUM,
  color: G_STRING,
  indeterminate: G_BOOL
};
var PROGRESS_LINEAR_DEFAULT_PROPS = _extends({
  value: 0,
  height: 9,
  active: true
}, DEFAULT_PROPS);
var PROGRESS_LINEAR_PROP_TYPES = _extends(_extends({
  height: G_NUM,
  active: G_BOOL,
  striped: G_BOOL,
  bordered: G_BOOL,
  fillHeight: G_BOOL
}, DEFAULT_PROPS_TYPE), COMMON_PROGRESS_TYPES);
var PROGRESS_CIRCULAR_DEFAULT_PROPS = _extends({
  size: 36,
  width: 2,
  value: 0,
  rotate: 0
}, DEFAULT_PROPS);
var PROGRESS_CIRCULAR_PROP_TYPES = _extends(_extends({
  size: G_NUM,
  flat: G_BOOL,
  width: G_NUM,
  rotate: G_NUM,
  label: G_STRING,
  elevated: G_BOOL
}, DEFAULT_PROPS_TYPE), COMMON_PROGRESS_TYPES);
var TOOLTIP_PROP_TYPES = _extends(_extends({
  top: G_BOOL,
  left: G_BOOL,
  inset: G_BOOL,
  right: G_BOOL,
  bottom: G_BOOL,
  visible: G_BOOL
}, DEFAULT_PROPS_TYPE), {}, {
  transitionProps: G_OBJ,
  content: G_NODE.isRequired
}, CSS_DIMENSION_DEFAULT_PROPS);
var CHIP_PROP_TYPES = _extends(_extends({
  flat: G_BOOL,
  label: G_BOOL,
  active: G_BOOL,
  link: G_STRING,
  append: G_NODE,
  action: G_NODE,
  prepend: G_NODE,
  color: G_STRING,
  size: SIZE_PROP,
  closable: G_BOOL,
  outlined: G_BOOL,
  bordered: G_BOOL,
  onAction: G_FUNC,
  closeIcon: G_NODE
}, DEFAULT_PROPS_TYPE), {}, {
  type: CONTEXT_COLOR_TYPES
});
var CAROUSEL_DEFAULT_PROPS = _extends({
  height: 400,
  interval: 5000,
  continuous: true
}, DEFAULT_PROPS);
var CAROUSEL_PROP_TYPES = _extends(_extends({
  value: G_NUM,
  cycle: G_BOOL,
  height: G_NUM,
  reverse: G_BOOL,
  interval: G_NUM,
  nextIcon: G_NODE,
  prevIcon: G_NODE,
  vertical: G_BOOL,
  onChange: G_FUNC,
  showArrows: G_BOOL,
  continuous: G_BOOL,
  delimiterIcon: G_NODE
}, DEFAULT_PROPS_TYPE), {}, {
  hideDelimiters: G_BOOL,
  showArrowsOnHover: G_BOOL,
  activeDelimiterIcon: G_NODE
});
var TABS_PROP_TYPES = _extends({
  value: G_NUM,
  rounded: G_BOOL,
  color: G_STRING,
  onClick: G_FUNC,
  onChange: G_FUNC,
  disabled: G_BOOL,
  outlined: G_BOOL,
  underlined: G_BOOL
}, DEFAULT_PROPS_TYPE);
var TAB_PROP_TYPES = _extends({
  onClick: G_FUNC,
  onMouseOut: G_FUNC,
  onMouseOver: G_FUNC
}, DEFAULT_PROPS_TYPE);
var TABITEMS_PROP_TYPES = _extends({
  value: G_NUM,
  height: G_NUM,
  reverse: G_BOOL,
  onChange: G_FUNC
}, DEFAULT_PROPS_TYPE);

var Fade = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Fade, _React$Component);

  function Fade(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.defaultStyle = {
      opacity: 0,
      transition: "opacity " + _this.props.duration + "ms ease-in-out"
    };
    _this.transitionStyles = {
      entering: {
        opacity: 1
      },
      entered: {
        opacity: 1
      },
      exiting: {
        opacity: 0
      },
      exited: {
        opacity: 0
      }
    };
    _this.state = {
      status: ''
    };
    _this.updateStatus = _this.updateStatus.bind(_assertThisInitialized(_this));
    return _this;
  }

  var _proto = Fade.prototype;

  _proto.updateStatus = function updateStatus(status) {
    this.setState({
      status: status
    });
  };

  _proto.render = function render() {
    var status = this.state.status;

    var _this$props = this.props,
        child = _this$props.children,
        otherProps = _objectWithoutPropertiesLoose(_this$props, ["children"]);

    return /*#__PURE__*/React.createElement(TransitionWrapper, _extends({}, otherProps, {
      onUpdate: this.updateStatus
    }), cloneElement(child, {
      style: _extends(_extends(_extends({}, this.defaultStyle), this.transitionStyles[status]), child.props.style)
    }));
  };

  return Fade;
}(React.Component);

Fade.displayName = 'NuFade';
Fade.defaultProps = {
  duration: 200
};
Fade.propTypes = {
  duration: G_NUM
};

var Grow = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Grow, _React$Component);

  function Grow(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.state = {
      status: ''
    };
    _this.updateStatus = _this.updateStatus.bind(_assertThisInitialized(_this));
    return _this;
  }

  var _proto = Grow.prototype;

  _proto.updateStatus = function updateStatus(status) {
    this.setState({
      status: status
    });
  };

  _proto.render = function render() {
    var status = this.state.status;

    var _this$props = this.props,
        origin = _this$props.origin,
        duration = _this$props.duration,
        child = _this$props.children,
        otherProps = _objectWithoutPropertiesLoose(_this$props, ["origin", "duration", "children"]);

    return /*#__PURE__*/React.createElement(TransitionWrapper, _extends({
      onUpdate: this.updateStatus,
      timeout: {
        exit: duration
      }
    }, otherProps), cloneElement(child, {
      style: _extends(_extends({
        opacity: 0,
        transformOrigin: origin
      }, this.transitionStyles[status]), child.props.style)
    }));
  };

  _createClass(Grow, [{
    key: "transition",
    get: function get() {
      return {
        transition: "all " + this.props.duration + "ms ease-in-out"
      };
    }
  }, {
    key: "transitionStyles",
    get: function get() {
      return {
        entering: {
          opacity: 1,
          transform: 'scale(0)',
          visibility: 'visible'
        },
        entered: _extends({
          opacity: 1,
          transform: 'scale(1.0)'
        }, this.transition),
        exiting: _extends({
          opacity: 0,
          transform: 'scale(0)'
        }, this.transition),
        exited: {
          opacity: 0,
          visibility: 'hidden'
        }
      };
    }
  }]);

  return Grow;
}(React.Component);

Grow.displayName = 'NuGrow';
Grow.defaultProps = {
  duration: 200,
  origin: 'center center'
};
Grow.propTypes = {
  duration: G_NUM,
  origin: G_STRING
};

var Slide = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Slide, _React$Component);

  function Slide(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.defaultStyle = {
      transition: "all " + _this.props.duration + "ms ease-in-out"
    };
    _this.transitionStyles = {
      enteringX: {
        opacity: 0,
        transform: 'translateX(-50%)'
      },
      enteringXR: {
        opacity: 0,
        transform: 'translateX(50%)'
      },
      enteringY: {
        opacity: 0,
        transform: 'translateY(-50%)'
      },
      enteringYR: {
        opacity: 0,
        transform: 'translateY(50%)'
      },
      entered: _extends(_extends({
        opacity: 1
      }, _this.defaultStyle), {}, {
        transform: 'translate(0)'
      }),
      exiting: {
        opacity: 0
      },
      exited: {
        opacity: 0
      }
    };
    _this.state = {
      status: ''
    };
    _this.updateStatus = _this.updateStatus.bind(_assertThisInitialized(_this));
    return _this;
  }

  var _proto = Slide.prototype;

  _proto.getStatus = function getStatus(status) {
    return status === 'entering' ? "" + status + this.type : status;
  };

  _proto.updateStatus = function updateStatus(status) {
    this.setState({
      status: status
    });
  };

  _proto.render = function render() {
    var status = this.state.status;

    var _this$props = this.props,
        origin = _this$props.origin,
        child = _this$props.children,
        otherProps = _objectWithoutPropertiesLoose(_this$props, ["origin", "children"]);

    return /*#__PURE__*/React.createElement(TransitionWrapper, _extends({}, otherProps, {
      onUpdate: this.updateStatus
    }), cloneElement(child, {
      style: _extends(_extends({
        opacity: 0,
        transformOrigin: origin
      }, this.transitionStyles[this.getStatus(status)]), child.props.style)
    }));
  };

  _createClass(Slide, [{
    key: "type",
    get: function get() {
      var _this$props2 = this.props,
          axis = _this$props2.axis,
          reverse = _this$props2.reverse;
      return "" + axis.toUpperCase() + (reverse ? 'R' : '');
    }
  }]);

  return Slide;
}(React.Component);

Slide.displayName = 'NuSlide';
Slide.defaultProps = {
  axis: 'Y',
  duration: 200,
  reverse: false,
  origin: 'center center'
};
Slide.propTypes = {
  axis: G_STRING,
  reverse: G_BOOL,
  duration: G_NUM,
  origin: G_STRING
};

var SlideCarousel = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(SlideCarousel, _React$Component);

  function SlideCarousel(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.slideTransition = {
      transition: "transform " + _this.props.duration + "ms ease-in-out"
    };
    _this.transitionStyles = {
      enteringX: {
        transform: 'translateX(-100%)'
      },
      enteringXR: {
        transform: 'translateX(100%)'
      },
      enteringY: {
        transform: 'translateY(-100%)'
      },
      enteringYR: {
        transform: 'translateY(100%)'
      },
      entered: _extends({
        transform: 'translate(0px)'
      }, _this.slideTransition),
      exitingX: _extends(_extends({}, _this.slideTransition), {}, {
        transform: 'translateX(100%)'
      }),
      exitingXR: _extends(_extends({}, _this.slideTransition), {}, {
        transform: 'translateX(-100%)'
      }),
      exitingY: _extends(_extends({}, _this.slideTransition), {}, {
        transform: 'translateY(100%)'
      }),
      exitingYR: _extends(_extends({}, _this.slideTransition), {}, {
        transform: 'translateY(-100%)'
      })
    };
    _this.state = {
      status: ''
    };
    _this.updateStatus = _this.updateStatus.bind(_assertThisInitialized(_this));
    return _this;
  }

  var _proto = SlideCarousel.prototype;

  _proto.getStatus = function getStatus(status) {
    return status === 'entering' || status === 'exiting' ? "" + status + this.type : status;
  };

  _proto.updateStatus = function updateStatus(status) {
    this.setState({
      status: status
    });
    callCallback(this.props.onUpdate, status);
  };

  _proto.render = function render() {
    var status = this.state.status;

    var _this$props = this.props,
        origin = _this$props.origin,
        duration = _this$props.duration,
        child = _this$props.children,
        otherProps = _objectWithoutPropertiesLoose(_this$props, ["origin", "duration", "children"]);

    var display = status ? status === 'exited' ? 'none' : undefined : 'none';
    return /*#__PURE__*/React.createElement(TransitionWrapper, _extends({}, otherProps, {
      timeout: {
        exit: duration
      },
      onUpdate: this.updateStatus
    }), cloneElement(child, {
      style: _extends(_extends({
        display: display,
        top: '0',
        position: 'absolute',
        transformOrigin: origin
      }, this.transitionStyles[this.getStatus(status)]), child.props.style)
    }));
  };

  _createClass(SlideCarousel, [{
    key: "type",
    get: function get() {
      var _this$props2 = this.props,
          axis = _this$props2.axis,
          reverse = _this$props2.reverse;
      return "" + axis.toUpperCase() + (reverse ? 'R' : '');
    }
  }]);

  return SlideCarousel;
}(React.Component);

SlideCarousel.displayName = 'NuSlideCarousel';
SlideCarousel.defaultProps = {
  axis: 'Y',
  duration: 250,
  reverse: false,
  origin: 'center center'
};
SlideCarousel.propTypes = {
  axis: G_STRING,
  reverse: G_BOOL,
  duration: G_NUM,
  origin: G_STRING
};

var ToggleButtonGroup = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(ToggleButtonGroup, _React$Component);

  function ToggleButtonGroup(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.state = {
      active: props.value,
      key: 1
    };
    return _this;
  }

  var _proto = ToggleButtonGroup.prototype;

  _proto.componentDidUpdate = function componentDidUpdate(props, state) {
    var active = this.state.active;

    if (JSON.stringify(state.active) !== JSON.stringify(active)) {
      callCallback(props.onChange, {
        active: active
      });
    }
  };

  _proto.handleClick = function handleClick(event) {
    var active = '';
    var selected = event.selected,
        value = event.value;
    var _this$state = this.state,
        key = _this$state.key,
        stateActive = _this$state.active;
    var _this$props = this.props,
        multiple = _this$props.multiple,
        mandatory = _this$props.mandatory,
        onClick = _this$props.onClick;

    if (selected) {
      if (multiple) {
        active = [].concat(stateActive || [], [value]);
      } else {
        active = value;
      }
    } else {
      if (multiple) {
        active = (stateActive || []).filter(function (a) {
          return a !== value;
        });

        if (mandatory && !active.length) {
          active = [value];
        }
      } else {
        if (mandatory) {
          active = value;
        }
      }
    }

    this.setState({
      active: active
    });
    this.setState({
      key: key + 1
    });
    callCallback(onClick, {
      event: event,
      active: active
    });
  };

  _proto.render = function render() {
    var _this2 = this;

    var _this$props2 = this.props,
        style = _this$props2.style,
        children = _this$props2.children,
        multiple = _this$props2.multiple,
        className = _this$props2.className;
    var buttons = passDownProp(Children.map(children, function (child) {
      if (child.type === ToggleButton) {
        var selected = false;
        var active = _this2.state.active;
        var value = child.props.value;

        if (Array.isArray(active)) {
          var trimmedActive = multiple ? active : active.filter(function (a, i) {
            return i === 0;
          });
          selected = !!trimmedActive.find(function (a) {
            return a === value;
          });
        } else {
          selected = active === value;
        }

        return cloneElement(child, {
          selected: selected,
          key: _this2.state.key,
          onChange: function onChange(e) {
            return _this2.handleClick(e, child);
          }
        });
      }
    }), this.props, ['size', 'color'].concat(CARD_PASS_DOWN));
    return /*#__PURE__*/React.createElement("div", {
      style: style,
      className: className
    }, buttons);
  };

  return ToggleButtonGroup;
}(React.Component);

ToggleButtonGroup.displayName = 'NuToggleButtonGroup';
ToggleButtonGroup.defaultProps = DEFAULT_PROPS;
ToggleButtonGroup.propTypes = _extends(_extends({
  multiple: G_BOOL,
  mandatory: G_BOOL
}, BUTTON_PROP_TYPES), {}, {
  value: BUTTON_GROUP_VALUE
});

var ToggleButton = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(ToggleButton, _React$Component);

  function ToggleButton(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    var _this$props = _this.props,
        selected = _this$props.selected,
        color = _this$props.color;
    _this.state = {
      isActive: selected || false,
      color: selected ? color : '',
      key: 1
    };
    return _this;
  }

  var _proto = ToggleButton.prototype;

  _proto.handleClick = function handleClick(event) {
    var _this$props2 = this.props,
        value = _this$props2.value,
        color = _this$props2.color,
        onClick = _this$props2.onClick,
        onChange = _this$props2.onChange;
    var isActive = !this.state.isActive;
    this.setState({
      isActive: isActive
    });
    this.setState({
      color: isActive ? color : ''
    });
    this.setState({
      key: this.state.key + 1
    });
    callCallback(onClick, {
      event: event,
      value: value
    });
    callCallback(onChange, {
      event: event,
      selected: isActive,
      value: value
    });
  };

  _proto.handleMouseOut = function handleMouseOut(e) {
    if (!this.state.isActive) {
      this.setState({
        color: ''
      });
    }

    callCallback(this.props.onMouseOut, e);
  };

  _proto.handleMouseOver = function handleMouseOver(e) {
    this.setState({
      color: this.props.color
    });
    callCallback(this.props.onMouseOver, e);
  };

  _proto.render = function render() {
    var _this2 = this;

    var _this$props3 = this.props,
        children = _this$props3.children,
        otherProps = _objectWithoutPropertiesLoose(_this$props3, ["children"]);

    return /*#__PURE__*/React.createElement(Button, _extends({}, otherProps, {
      type: "toggle",
      block: false,
      depressed: false,
      key: this.state.key,
      color: this.state.color,
      active: this.state.isActive,
      onClick: function onClick(e) {
        return _this2.handleClick(e);
      },
      onMouseOut: function onMouseOut(e) {
        return _this2.handleMouseOut(e);
      },
      onMouseOver: function onMouseOver(e) {
        return _this2.handleMouseOver(e);
      }
    }), children);
  };

  return ToggleButton;
}(React.Component);

ToggleButton.displayName = 'NuToggleButton';
ToggleButton.defaultProps = _extends({
  text: true
}, DEFAULT_PROPS);
ToggleButton.propTypes = _extends({
  value: G_ANY,
  selected: G_BOOL
}, BUTTON_PROP_TYPES);

var IconButton = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(IconButton, _React$Component);

  function IconButton() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = IconButton.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        children = _this$props.children,
        otherProps = _objectWithoutPropertiesLoose(_this$props, ["children"]);

    return /*#__PURE__*/React.createElement(Button, _extends({}, otherProps, {
      type: "icon",
      block: false,
      depressed: false
    }), children);
  };

  return IconButton;
}(React.Component);

IconButton.displayName = 'NuIconButton';
IconButton.defaultProps = _extends({
  text: true
}, DEFAULT_PROPS);
IconButton.propTypes = BUTTON_PROP_TYPES;

var styles = {"nu-avatar":"_30opT","nu-avatar--img":"_gxOv4","nu-avatar--small":"_DlS5H","nu-avatar--medium":"_HQ-dl","nu-avatar--large":"_102pn","nu-avatar--circle":"_1Rtx1","nu-avatar--square":"_3i8AP","nu-avatar--rounded":"_1jhwD"};

var Avatar = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Avatar, _React$Component);

  function Avatar(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.state = {
      id: uid()
    };
    return _this;
  }

  var _proto = Avatar.prototype;

  _proto.getClasses = function getClasses(name) {
    var sizeClass = this.isSizeNumber ? '' : "nu-avatar--" + this.sizeText;

    switch (name) {
      case 'avatar':
        return getModuleClasses(styles, "\n            nu-avatar\n            nu-avatar--" + this.variant + "\n            " + sizeClass + "\n          ");

      case 'img':
        return getModuleClasses(styles, 'nu-avatar--img');
    }
  };

  _proto.componentDidMount = function componentDidMount() {
    var _this$props = this.props,
        color = _this$props.color,
        bgColor = _this$props.bgColor;
    var elem = document.getElementById(this.state.id);
    setCSSVariable(elem, '--avatar-bg-color', bgColor);
    setCSSVariable(elem, '--avatar-text-color', color);
  };

  _proto.render = function render() {
    var sizeStyles = {};
    var _this$props2 = this.props,
        style = _this$props2.style,
        size = _this$props2.size,
        className = _this$props2.className;

    if (this.isSizeNumber) {
      sizeStyles.width = size + "px";
      sizeStyles.height = size + "px";
    }

    return /*#__PURE__*/React.createElement("div", {
      id: this.state.id,
      style: _extends(_extends({}, style), sizeStyles),
      className: this.getClasses('avatar') + " " + className
    }, this.avatarChildren);
  };

  _createClass(Avatar, [{
    key: "initials",
    get: function get() {
      var initials = this.props.alt.match(/\b\w/g) || [];
      return ((initials.shift() || '') + (initials.pop() || '')).toUpperCase();
    }
  }, {
    key: "isSizeNumber",
    get: function get() {
      return !isNaN(this.props.size);
    }
  }, {
    key: "size",
    get: function get() {
      var s = this.sizeText;
      if (this.isSizeNumber) return this.props.size;
      return s === 'small' ? 24 : s === 'medium' ? 40 : s === 'large' ? 56 : 40;
    }
  }, {
    key: "variant",
    get: function get() {
      var _this$props3 = this.props,
          square = _this$props3.square,
          rounded = _this$props3.rounded;
      return square ? 'square' : rounded ? 'rounded' : 'circle';
    }
  }, {
    key: "sizeText",
    get: function get() {
      var _this2 = this;

      return SIZES.find(function (s) {
        return s === _this2.props.size;
      }) || 'medium';
    }
  }, {
    key: "avatarChildren",
    get: function get() {
      var _this$props4 = this.props,
          src = _this$props4.src,
          alt = _this$props4.alt,
          loaded = _this$props4.loaded,
          children = _this$props4.children;

      if (src && loaded) {
        return /*#__PURE__*/React.createElement("img", {
          alt: alt,
          src: src,
          width: this.size,
          height: this.size
        });
      } else if (children) {
        return children;
      } else if (alt) {
        return this.initials;
      }
    }
  }]);

  return Avatar;
}(React.Component);

Avatar.displayName = 'NuAvatar';
Avatar.defaultProps = _extends({
  size: 'medium'
}, DEFAULT_PROPS);
Avatar.propTypes = _extends(_extends({
  alt: G_STRING,
  src: G_STRING,
  square: G_BOOL,
  rounded: G_BOOL,
  color: G_STRING,
  bgColor: G_STRING
}, DEFAULT_PROPS_TYPE), {}, {
  size: SIZE_PROP_WITH_NUM
});
var Avatar$1 = withImage(Avatar);

var styles$1 = {"nu-button":"_cL4RU","nu-button--light":"_CWiZp","nu-button--dark":"_3tLvr","nu-button--fab":"_1YdKB","nu-button--icon":"_2vvr7","nu-button--toggle":"_3hFGr","nu-button--small":"_37by5","nu-button--medium":"_3W7Om","nu-button--large":"_r7kxw","nu-button--block":"_2ULiP","nu-button--rounded":"_39_ND","nu-button--disabled":"_2YNuR","nu-button--text":"_1qWOD","nu-button--bordered":"_z9EYS","nu-button--outlined":"_1crAB","nu-button--depressed":"_EotAP","nu-button--active":"_28gcN","nu-button--no-press":"_2W0Fs","nu-button-inner":"_3lLt8"};

var Button = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Button, _React$Component);

  function Button() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Button.prototype;

  _proto.getValidSize = function getValidSize(size) {
    return SIZES.find(function (s) {
      return s === size;
    }) || 'medium';
  };

  _proto.getClasses = function getClasses(classType) {
    var _this$props = this.props,
        type = _this$props.type,
        dark = _this$props.dark,
        size = _this$props.size,
        text = _this$props.text,
        block = _this$props.block,
        active = _this$props.active,
        noPress = _this$props.noPress,
        rounded = _this$props.rounded,
        disabled = _this$props.disabled,
        bordered = _this$props.bordered,
        outlined = _this$props.outlined,
        depressed = _this$props.depressed;

    switch (classType) {
      case 'container':
        return getModuleClasses(styles$1, "\n            nu-button\n            cursor-pointer\n            nu-button--" + type + "\n            " + (text ? 'nu-button--text' : '') + "\n            " + (block ? 'nu-button--block' : '') + "\n            " + (active ? 'nu-button--active' : '') + "\n            nu-button--" + this.getValidSize(size) + "\n            nu-button--" + (dark ? 'dark' : 'light') + "\n            " + (rounded ? 'nu-button--rounded' : '') + "\n            " + (noPress ? 'nu-button--no-press' : '') + "\n            " + (outlined ? 'nu-button--outlined' : '') + "\n            " + (bordered ? 'nu-button--bordered' : '') + "\n            " + (disabled ? 'nu-button--disabled' : '') + "\n            " + (depressed ? 'nu-button--depressed' : '') + "\n          ");

      case 'input':
        return getModuleClasses(styles$1, 'nu-button-inner');
    }
  };

  _proto.render = function render() {
    var _this$props2 = this.props,
        id = _this$props2.id,
        type = _this$props2.type,
        style = _this$props2.style,
        color = _this$props2.color,
        bgColor = _this$props2.bgColor,
        disabled = _this$props2.disabled,
        outlined = _this$props2.outlined,
        children = _this$props2.children,
        className = _this$props2.className;
    var btnChildren = passDownProp(children, this.props, 'dark');
    return /*#__PURE__*/React.createElement("div", _extends({
      id: id
    }, pickKeys(this.props, MOUSE_EVENTS), {
      className: this.getClasses('container') + " " + className,
      style: _extends(_extends({}, style), {}, {
        color: disabled ? null : color,
        backgroundColor: disabled ? null : bgColor,
        border: disabled ? null : outlined ? "1px solid " + color : null
      })
    }), /*#__PURE__*/React.createElement("button", {
      className: this.getClasses('input')
    }, type ? btnChildren : btnChildren || 'button'));
  };

  return Button;
}(React.Component);

Button.displayName = 'NuButton';
Button.defaultProps = _extends({
  size: 'medium'
}, DEFAULT_PROPS);
Button.propTypes = BUTTON_PROP_TYPES;

var styles$2 = {"nu-chip":"_4B6J_","nu-chip--light":"_1Y3po","nu-chip--dark":"_1Z5zg","nu-chip--active":"_C19fA","nu-chip--label":"_XnRhC","nu-chip--flat":"_1LBtg","nu-chip--bordered":"_2va-3","nu-chip--outlined":"_2KXIV","nu-chip--small":"_3XUk8","nu-chip--medium":"_1Pf7_","nu-chip--large":"_2WYlD","nu-chip--info":"_MP_qE","nu-chip--error":"_1KsL0","nu-chip--warning":"_336jk","nu-chip--success":"_3LwMx","nu-append":"_3nEad","nu-prepend":"_cDvCc","nu-action":"_3YiUZ","nu-action--close":"_2j5lw","nu-append--with-action":"_bL2DT"};

var Chip = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Chip, _React$Component);

  function Chip(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.state = {
      id: uid()
    };
    return _this;
  }

  var _proto = Chip.prototype;

  _proto.getClasses = function getClasses(type) {
    var _this$props = this.props,
        dark = _this$props.dark,
        flat = _this$props.flat,
        label = _this$props.label,
        active = _this$props.active,
        outlined = _this$props.outlined,
        bordered = _this$props.bordered;

    switch (type) {
      case 'chip':
        return getModuleClasses(styles$2, "\n            nu-chip\n            nu-chip--" + this.size + "\n            " + (flat ? 'nu-chip--flat' : '') + "\n            " + (label ? 'nu-chip--label' : '') + "\n            " + (active ? 'nu-chip--active' : '') + "\n            nu-chip--" + (dark ? 'dark' : 'light') + "\n            " + (outlined ? 'nu-chip--outlined' : '') + "\n            " + (bordered ? 'nu-chip--bordered' : '') + "\n            " + (this.type ? "nu-chip--" + this.type : '') + "\n          ");

      default:
        return getModuleClasses(styles$2, type);
    }
  };

  _proto.setColor = function setColor() {
    var elem = document.getElementById(this.state.id);
    setCSSVariable(elem, '--text-color', this.props.color);
  };

  _proto.handleActionClick = function handleActionClick(e) {
    callCallback(this.props.onAction, e);
  };

  _proto.componentDidMount = function componentDidMount() {
    this.setColor();
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    this.setColor();
  };

  _proto.render = function render() {
    var linkProps = {};
    var _this$props2 = this.props,
        link = _this$props2.link,
        style = _this$props2.style,
        children = _this$props2.children,
        className = _this$props2.className;
    var tag = link ? 'a' : 'span';
    if (link) linkProps.href = link;
    var elem = createElement(tag, _extends(_extends({
      style: style,
      key: uid()
    }, linkProps), {}, {
      id: this.state.id,
      className: this.getClasses('chip') + " " + className
    }), [this.prepend, children, this.append, this.action]);
    return elem;
  };

  _createClass(Chip, [{
    key: "size",
    get: function get() {
      var size = this.props.size;
      return SIZES.find(function (s) {
        return s === size;
      }) || 'medium';
    }
  }, {
    key: "type",
    get: function get() {
      var _this2 = this;

      return CONTEXT_COLORS.find(function (t) {
        return t === _this2.props.type;
      }) || null;
    }
  }, {
    key: "append",
    get: function get() {
      var _this$props3 = this.props,
          append = _this$props3.append,
          action = _this$props3.action,
          closable = _this$props3.closable;
      var actionClass = action || closable ? 'nu-append--with-action' : '';
      var className = "" + this.getClasses("nu-append " + actionClass);
      return append ? cloneElement(append, {
        className: className
      }) : null;
    }
  }, {
    key: "prepend",
    get: function get() {
      var prepend = this.props.prepend;
      var className = this.getClasses('nu-prepend');
      return prepend ? cloneElement(prepend, {
        className: className
      }) : null;
    }
  }, {
    key: "action",
    get: function get() {
      var _this3 = this;

      var actionItem = null;
      var closableItem = null;
      var _this$props4 = this.props,
          action = _this$props4.action,
          closable = _this$props4.closable,
          closeIcon = _this$props4.closeIcon;

      if (action) {
        actionItem = cloneElement(action, {
          key: uid(),
          className: this.getClasses('nu-action'),
          onClick: function onClick(e) {
            return _this3.handleActionClick(e);
          }
        });
      }

      if (closable) {
        closableItem = closeIcon ? cloneElement(action, {
          key: uid(),
          className: this.getClasses('nu-action'),
          onClick: function onClick(e) {
            return _this3.handleActionClick(e);
          }
        }) : /*#__PURE__*/React.createElement("span", {
          key: uid(),
          className: this.getClasses('nu-action nu-action--close'),
          onClick: function onClick(e) {
            return _this3.handleActionClick(e);
          }
        }, "\xD7");
      }

      return closable ? closableItem : action ? actionItem : null;
    }
  }]);

  return Chip;
}(React.Component);

Chip.displayName = 'NuChip';
Chip.defaultProps = DEFAULT_PROPS;
Chip.propTypes = CHIP_PROP_TYPES;

var styles$3 = {"nu-fab":"_3RmuL","nu-fab--animation":"_3XYq8","fab-animate":"_2xXgg","nu-fab--fixed":"_2fQ45","nu-fab--absolute":"_1yPi-","nu-fab--top":"_MXoMR","nu-fab--right":"_39m3p","nu-fab--bottom":"_1SKZA","nu-fab--left":"_300yT"};

var Fab = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Fab, _React$Component);

  function Fab() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Fab.prototype;

  _proto.getClasses = function getClasses() {
    var _this$props = this.props,
        fixed = _this$props.fixed,
        top = _this$props.top,
        right = _this$props.right,
        bottom = _this$props.bottom,
        left = _this$props.left,
        absolute = _this$props.absolute,
        animation = _this$props.animation;
    return getModuleClasses(styles$3, "\n        nu-fab\n        " + (top ? 'nu-fab--top' : '') + "\n        " + (left ? 'nu-fab--left' : '') + "\n        " + (right ? 'nu-fab--right' : '') + "\n        " + (bottom ? 'nu-fab--bottom' : '') + "\n        " + (fixed ? 'nu-fab--fixed' : '') + "\n        " + (absolute ? 'nu-fab--absolute' : '') + "\n        " + (animation ? 'nu-fab--animation' : '') + "\n      ");
  };

  _proto.render = function render() {
    var _this$props2 = this.props,
        children = _this$props2.children,
        style = _this$props2.style,
        className = _this$props2.className,
        otherProps = _objectWithoutPropertiesLoose(_this$props2, ["children", "style", "className"]);

    return /*#__PURE__*/React.createElement("div", {
      style: style,
      className: this.getClasses() + " " + className
    }, /*#__PURE__*/React.createElement(Button, _extends({}, otherProps, {
      rounded: true,
      type: "fab",
      text: false,
      block: false,
      outlined: false,
      depressed: false
    }), children));
  };

  return Fab;
}(React.Component);

Fab.displayName = 'NuFab';
Fab.defaultProps = _extends({
  animation: true
}, DEFAULT_PROPS);
Fab.propTypes = FAB_BUTTON_PROP_TYPES;

var styles$4 = {"nu-tabs-wrapper":"_ZcHct","nu-tab-selector":"_2NgZv","nu-tabs-wrapper--rounded":"_1G36q","nu-tabs-wrapper--outlined":"_3AEIw","nu-tabs-wrapper--underlined":"_1km6c","nu-tab-items-wrapper":"_2Yk9X","nu-tab-items-container":"_1KP4a","nu-tab-item":"_pAlw7","nu-tab":"_1_tFB","nu-tab--light":"_1sEgp","nu-tabs-wrapper--light":"_1Q6IQ","nu-tab-items-wrapper--light":"_2GePn","nu-tab--dark":"_GZEDh","nu-tabs-wrapper--dark":"_15fiK","nu-tab-items-wrapper--dark":"_27Dgb"};

var TabItems = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(TabItems, _React$Component);

  TabItems.getDerivedStateFromProps = function getDerivedStateFromProps(_ref) {
    var height = _ref.height;

    if (height) {
      return {
        height: height
      };
    } else {
      return {};
    }
  };

  function TabItems(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.prev = 0;
    _this.state = {
      color: '',
      height: props.height
    };
    return _this;
  }

  var _proto = TabItems.prototype;

  _proto.getClasses = function getClasses(elem) {
    var dark = this.props.dark;

    if (elem === 'container') {
      return getModuleClasses(styles$4, "\n          nu-tab-items-wrapper\n          nu-tab-items-wrapper--" + (dark ? 'dark' : 'light') + "\n        ");
    } else {
      return getModuleClasses(styles$4, elem);
    }
  };

  _proto.clearHeightTimeout = function clearHeightTimeout() {
    clearTimeout(this.timeout);
  };

  _proto.handleRef = function handleRef(item, check) {
    var _this2 = this;

    if (check === void 0) {
      check = false;
    }

    if (!check) return;
    var tabItem = findDOMNode(item);
    if (!tabItem) return;
    this.clearHeightTimeout();
    this.timeout = setTimeout(function () {
      var stateHeight = _this2.state.height;
      var height = tabItem.scrollHeight;
      if (height === stateHeight) return;

      _this2.setState({
        height: height
      });
    }, 250);
  };

  _proto.componentDidUpdate = function componentDidUpdate(_ref2) {
    var value = _ref2.value;
    var _this$props = this.props,
        active = _this$props.value,
        onChange = _this$props.onChange;
    this.prev = active || 0;

    if (active !== value) {
      callCallback(onChange, {
        active: active
      });
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.clearHeightTimeout();
  };

  _proto.render = function render() {
    var height = this.state.height;
    var _this$props2 = this.props,
        style = _this$props2.style,
        className = _this$props2.className;
    return /*#__PURE__*/React.createElement("div", {
      style: _extends({
        height: height + "px"
      }, style),
      className: this.getClasses('container') + " " + className
    }, /*#__PURE__*/React.createElement("div", {
      className: this.getClasses('nu-tab-items-container')
    }, this.tabItems));
  };

  _createClass(TabItems, [{
    key: "tabItems",
    get: function get() {
      var _this3 = this;

      var _this$props3 = this.props,
          children = _this$props3.children,
          propReverse = _this$props3.reverse,
          value = _this$props3.value;
      var reverse = this.prev < value;
      reverse = propReverse ? !reverse : reverse;
      return passDownProp(Children.map(children, function (child, index) {
        return /*#__PURE__*/React.createElement(SlideCarousel, {
          appear: true,
          axis: "X",
          duration: 200,
          reverse: reverse,
          "in": index === value
        }, cloneElement(child, {
          ref: function ref(_ref3) {
            return _this3.handleRef(_ref3, index === value);
          }
        }));
      }), this.props, ['dark']);
    }
  }]);

  return TabItems;
}(React.Component);

TabItems.displayName = 'NuTabItems';
TabItems.defaultProps = _extends({
  height: 0
}, DEFAULT_PROPS);
TabItems.propTypes = DEFAULT_PROPS_TYPE;

var TabItem = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(TabItem, _React$Component);

  function TabItem() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = TabItem.prototype;

  _proto.getClasses = function getClasses(elem) {
    return getModuleClasses(styles$4, elem);
  };

  _proto.render = function render() {
    var _this$props = this.props,
        style = _this$props.style,
        className = _this$props.className,
        children = _this$props.children;
    return /*#__PURE__*/React.createElement("div", {
      style: style,
      className: this.getClasses('nu-tab-item') + " " + className
    }, children);
  };

  return TabItem;
}(React.Component);

TabItem.displayName = 'NuTabItem';
TabItem.defaultProps = DEFAULT_PROPS;
TabItem.propTypes = DEFAULT_PROPS_TYPE;

var Tabs = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Tabs, _React$Component);

  Tabs.getDerivedStateFromProps = function getDerivedStateFromProps(_ref) {
    var active = _ref.value;
    return {
      active: active
    };
  };

  function Tabs(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.wait = false;
    _this.state = {
      tabsMeta: {},
      disabled: false,
      active: props.value || 0
    };
    return _this;
  }

  var _proto = Tabs.prototype;

  _proto.getClasses = function getClasses(elem) {
    var _this$props = this.props,
        dark = _this$props.dark,
        rounded = _this$props.rounded,
        outlined = _this$props.outlined,
        underlined = _this$props.underlined;

    if (elem === 'container') {
      return getModuleClasses(styles$4, "\n          nu-tabs-wrapper\n          nu-tabs-wrapper--" + (dark ? 'dark' : 'light') + "\n          " + (rounded ? 'nu-tabs-wrapper--rounded' : '') + "\n          " + (outlined ? 'nu-tabs-wrapper--outlined' : '') + "\n          " + (underlined ? 'nu-tabs-wrapper--underlined' : '') + "\n        ");
    } else {
      return getModuleClasses(styles$4, elem);
    }
  };

  _proto.getLeftPos = function getLeftPos(meta, value) {
    var width = 0;

    for (var i = 0; i < value; i++) {
      width += meta[i];
    }

    return width;
  };

  _proto.pauseClick = function pauseClick() {
    var _this2 = this;

    this.wait = true;
    setTimeout(function () {
      return _this2.wait = false;
    }, 250);
  };

  _proto.handleClick = function handleClick(event, active, click) {
    if (this.wait) return;
    var _this$props2 = this.props,
        onClick = _this$props2.onClick,
        onChange = _this$props2.onChange;
    this.setState({
      active: active
    });
    callCallback(click, event);
    callCallback(onChange, {
      active: active
    });
    callCallback(onClick, {
      event: event,
      active: active
    });
    this.pauseClick();
  };

  _proto.handleRef = function handleRef(ref, index) {
    var _extends2;

    var tab = findDOMNode(ref);
    if (!tab) return;
    var tabsMeta = this.state.tabsMeta;

    var _tab$getBoundingClien = tab.getBoundingClientRect(),
        width = _tab$getBoundingClien.width;

    if (tabsMeta[index] === width) return;
    this.setState({
      tabsMeta: _extends(_extends({}, tabsMeta), {}, (_extends2 = {}, _extends2[index] = width, _extends2))
    });
  };

  _proto.render = function render() {
    var _this$props3 = this.props,
        style = _this$props3.style,
        className = _this$props3.className;
    return /*#__PURE__*/React.createElement("div", {
      style: style,
      className: this.getClasses('container') + " " + className
    }, this.tabItems, /*#__PURE__*/React.createElement("div", {
      style: this.selectorStyle,
      className: this.getClasses('nu-tab-selector')
    }));
  };

  _createClass(Tabs, [{
    key: "selectorStyle",
    get: function get() {
      var _this$state = this.state,
          active = _this$state.active,
          tabsMeta = _this$state.tabsMeta;
      var leftPos = this.getLeftPos(tabsMeta, active);
      var width = tabsMeta[active];

      if (!width) {
        return {
          display: 'none'
        };
      }

      return {
        width: width + "px",
        left: leftPos + "px"
      };
    }
  }, {
    key: "tabItems",
    get: function get() {
      var _this3 = this;

      var active = this.state.active;
      var children = this.props.children;
      return passDownProp(Children.map(children, function (child, index) {
        if (child.type === Tab) {
          var _onClick = child.props.onClick;
          return cloneElement(child, {
            active: index === active,
            ref: function ref(_ref2) {
              return _this3.handleRef(_ref2, index);
            },
            onClick: function onClick(e) {
              return _this3.handleClick(e, index, _onClick);
            }
          });
        }
      }), this.props, ['dark', 'color', 'disabled', 'rounded']);
    }
  }]);

  return Tabs;
}(React.Component);

Tabs.displayName = 'NuTabs';
Tabs.defaultProps = _extends(_extends({}, DEFAULT_PROPS), {}, {
  color: 'var(--primary)'
});
Tabs.propTypes = TABS_PROP_TYPES;

var Tab = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Tab, _React$Component);

  function Tab(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.state = {
      color: ''
    };
    return _this;
  }

  var _proto = Tab.prototype;

  _proto.getClasses = function getClasses(elem) {
    var dark = this.props.dark;

    if (elem === 'tab') {
      return getModuleClasses(styles$4, "\n          nu-tab\n          nu-tab--" + (dark ? 'dark' : 'light') + "\n        ");
    } else {
      return getModuleClasses(styles$4, elem);
    }
  };

  _proto.handleMouseOut = function handleMouseOut(e) {
    this.setState({
      color: ''
    });
    callCallback(this.props.onMouseOut, e);
  };

  _proto.handleMouseOver = function handleMouseOver(e) {
    this.setState({
      color: this.props.color
    });
    callCallback(this.props.onMouseOver, e);
  };

  _proto.render = function render() {
    var _this2 = this;

    var _this$props = this.props,
        style = _this$props.style,
        className = _this$props.className,
        children = _this$props.children;
    var pickedProps = pickKeys(this.props, ['dark', 'onClick', 'disabled']);
    return /*#__PURE__*/React.createElement(Button, _extends({
      text: true,
      noPress: true,
      style: style
    }, pickedProps, {
      color: this.color,
      onMouseOut: function onMouseOut(e) {
        return _this2.handleMouseOut(e);
      },
      onMouseOver: function onMouseOver(e) {
        return _this2.handleMouseOver(e);
      },
      className: this.getClasses('tab') + " " + className
    }), children);
  };

  _createClass(Tab, [{
    key: "color",
    get: function get() {
      var color = this.state.color;
      var _this$props2 = this.props,
          active = _this$props2.active,
          propColor = _this$props2.color;
      return active ? propColor : color;
    }
  }]);

  return Tab;
}(React.Component);

Tab.displayName = 'NuTab';
Tab.defaultProps = DEFAULT_PROPS;
Tab.propTypes = DEFAULT_PROPS_TYPE;

var styles$5 = {"nu-card":"_28vIk","nu-card-action":"_qCt7a","nu-card-media-title":"_1gHjR","nu-card-content":"_2So3v","nu-card-header":"_2TuLn","nu-card-media":"_3KQfR","nu-card--light":"_1SFBz","nu-card-media--light":"_3XlrT","nu-card-action--light":"_1l5Ig","nu-card-header--light":"_2vg-Y","nu-card-content--light":"_2uw1B","nu-card--dark":"_2nMGC","nu-card-media--dark":"_9VJ2s","nu-card-action--dark":"_1e8rA","nu-card-header--dark":"_1Vkyx","nu-card-content--dark":"_BClU8","nu-card--rounded":"_1qJ6l","nu-card-media--rounded":"_uCBEl","nu-card-action--rounded":"_3MMHx","nu-card-header--rounded":"_1ZP9f","nu-card-content--rounded":"_1xGVC","elevation-5":"_1ac5u","elevation-4":"_33saR","elevation-3":"_2Y5h3","elevation-2":"_3hBYZ","elevation-1":"_2bGnb","elevation-0":"_2xWhy","nu-card--outlined":"_2BfgR","nu-card--flat":"_PR9zj","nu-card--bordered":"_12WTq","nu-card--inset":"_2Xmdp","nu-header-content":"_3bkaL","nu-header-content--left":"_3obGh","nu-header-avatar":"__N77l","nu-card-media--disabled":"_2fyoZ"};

var CardContent = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(CardContent, _React$Component);

  function CardContent() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = CardContent.prototype;

  _proto.getClass = function getClass() {
    var _this$props = this.props,
        dark = _this$props.dark,
        rounded = _this$props.rounded;
    return getModuleClasses(styles$5, "\n        nu-card-content\n        nu-card-content--" + (dark ? 'dark' : 'light') + "\n        " + (rounded ? 'nu-card-content--rounded' : '') + "\n      ");
  };

  _proto.render = function render() {
    var _this$props2 = this.props,
        style = _this$props2.style,
        className = _this$props2.className,
        children = _this$props2.children;
    var cardChildren = passDownProp(children, this.props, CARD_CHILD_PASS_DOWN);
    return /*#__PURE__*/React.createElement("div", {
      style: style,
      className: this.getClass() + " " + className
    }, cardChildren);
  };

  return CardContent;
}(React.Component);

CardContent.displayName = 'NuCardContent';
CardContent.defaultProps = DEFAULT_PROPS;
CardContent.propTypes = _extends({
  rounded: G_BOOL,
  disabled: G_BOOL
}, DEFAULT_PROPS_TYPE);

var CardHeader = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(CardHeader, _React$Component);

  function CardHeader() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = CardHeader.prototype;

  _proto.getClass = function getClass(classType) {
    var _this$props = this.props,
        dark = _this$props.dark,
        rounded = _this$props.rounded;

    switch (classType) {
      case 'wrapper':
        return getModuleClasses(styles$5, "\n            nu-card-header\n            nu-card-header--" + (dark ? 'dark' : 'light') + "\n            " + (rounded ? 'nu-card-header--rounded' : '') + "\n          ");

      case 'content':
        return getModuleClasses(styles$5, 'nu-header-content');

      case 'avatar':
        return getModuleClasses(styles$5, 'nu-header-avatar');

      case 'content-left':
        return getModuleClasses(styles$5, 'nu-header-content nu-header-content--left');
    }
  };

  _proto.render = function render() {
    var _this$props2 = this.props,
        style = _this$props2.style,
        title = _this$props2.title,
        avatar = _this$props2.avatar,
        action = _this$props2.action,
        children = _this$props2.children,
        subtitle = _this$props2.subtitle,
        className = _this$props2.className;
    var cardTitle = passDownProp(title, this.props, CARD_HEAD_PASS_DOWN);
    var cardAvatar = passDownProp(avatar, this.props, CARD_HEAD_PASS_DOWN);
    var cardAction = passDownProp(action, this.props, CARD_HEAD_PASS_DOWN);
    var cardSubTitle = passDownProp(subtitle, this.props, CARD_HEAD_PASS_DOWN);
    var cardChildren = passDownProp(children, this.props, CARD_CHILD_PASS_DOWN);
    return /*#__PURE__*/React.createElement("div", {
      style: style,
      className: this.getClass('wrapper') + " " + className
    }, cardAvatar || cardTitle || cardSubTitle || cardAction ? /*#__PURE__*/React.createElement("div", {
      className: this.getClass('content')
    }, /*#__PURE__*/React.createElement("div", {
      className: this.getClass('content-left')
    }, cardAvatar ? /*#__PURE__*/React.createElement("div", {
      className: this.getClass('avatar')
    }, cardAvatar) : null, /*#__PURE__*/React.createElement("div", null, cardTitle, cardSubTitle)), cardAction) : null, cardChildren);
  };

  return CardHeader;
}(React.Component);

CardHeader.displayName = 'NuCardHeader';
CardHeader.defaultProps = DEFAULT_PROPS;
CardHeader.propTypes = _extends({
  title: G_NODE,
  avatar: G_NODE,
  action: G_NODE,
  rounded: G_BOOL,
  subtitle: G_NODE,
  disabled: G_BOOL
}, DEFAULT_PROPS_TYPE);

var CardAction = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(CardAction, _React$Component);

  function CardAction() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = CardAction.prototype;

  _proto.getClass = function getClass() {
    var _this$props = this.props,
        dark = _this$props.dark,
        rounded = _this$props.rounded;
    return getModuleClasses(styles$5, "\n        nu-card-action\n        nu-card-action--" + (dark ? 'dark' : 'light') + "\n        " + (rounded ? 'nu-card-action--rounded' : '') + "\n      ");
  };

  _proto.render = function render() {
    var _this$props2 = this.props,
        style = _this$props2.style,
        className = _this$props2.className,
        children = _this$props2.children;
    var cardChildren = passDownProp(children, this.props, CARD_CHILD_PASS_DOWN);
    return /*#__PURE__*/React.createElement("div", {
      style: style,
      className: this.getClass() + " " + className
    }, cardChildren);
  };

  return CardAction;
}(React.Component);

CardAction.displayName = 'NuCardAction';
CardAction.defaultProps = DEFAULT_PROPS;
CardAction.propTypes = _extends({
  rounded: G_BOOL,
  disabled: G_BOOL
}, DEFAULT_PROPS_TYPE);

var CardMedia = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(CardMedia, _React$Component);

  function CardMedia() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = CardMedia.prototype;

  _proto.getClass = function getClass(classType) {
    var _this$props = this.props,
        dark = _this$props.dark,
        rounded = _this$props.rounded,
        disabled = _this$props.disabled;

    switch (classType) {
      case 'media':
        return getModuleClasses(styles$5, "\n            nu-card-media\n            nu-card-media--" + (dark ? 'dark' : 'light') + "\n            " + (rounded ? 'nu-card-media--rounded' : '') + "\n            " + (disabled ? 'nu-card-media--disabled' : '') + "\n          ");

      case 'title':
        return getModuleClasses(styles$5, 'nu-card-media-title');
    }
  };

  _proto.render = function render() {
    var _this$props2 = this.props,
        src = _this$props2.src,
        dark = _this$props2.dark,
        title = _this$props2.title,
        height = _this$props2.height,
        style = _this$props2.style,
        className = _this$props2.className;
    return /*#__PURE__*/React.createElement("div", {
      title: title,
      style: _extends(_extends({}, style), {}, {
        height: height + "px",
        backgroundImage: "url(" + src + ")"
      }),
      className: this.getClass('media') + " " + className
    }, title ? /*#__PURE__*/React.createElement(H6, {
      dark: dark,
      className: "" + this.getClass('title')
    }, title) : null);
  };

  return CardMedia;
}(React.Component);

CardMedia.displayName = 'NuCardMedia';
CardMedia.defaultProps = _extends({
  height: 160
}, DEFAULT_PROPS);
CardMedia.propTypes = _extends({
  height: G_NUM,
  src: G_STRING,
  title: G_STRING,
  rounded: G_BOOL,
  disabled: G_BOOL
}, DEFAULT_PROPS_TYPE);

var Card = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Card, _React$Component);

  function Card() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Card.prototype;

  _proto.getClass = function getClass() {
    var _this$props = this.props,
        dark = _this$props.dark,
        flat = _this$props.flat,
        inset = _this$props.inset,
        rounded = _this$props.rounded,
        outlined = _this$props.outlined,
        bordered = _this$props.bordered,
        elevation = _this$props.elevation;
    var cardElevation = !isNaN(elevation) ? String(elevation) : null;
    return getModuleClasses(styles$5, "\n        nu-card\n        " + (flat ? 'nu-card--flat' : '') + "\n        elevation-" + (cardElevation || 1) + "\n        " + (inset ? 'nu-card--inset' : '') + "\n        nu-card--" + (dark ? 'dark' : 'light') + "\n        " + (rounded ? 'nu-card--rounded' : '') + "\n        " + (bordered ? 'nu-card--bordered' : '') + "\n        " + (outlined ? 'nu-card--outlined' : '') + "\n      ");
  };

  _proto.render = function render() {
    var sizeStyles = {};
    var _this$props2 = this.props,
        id = _this$props2.id,
        dark = _this$props2.dark,
        style = _this$props2.style,
        loading = _this$props2.loading,
        children = _this$props2.children,
        className = _this$props2.className;
    var cardChildren = passDownProp(children, this.props, CARD_PASS_DOWN);
    var pickedStyles = pickKeys(this.props, CSS_DIMENSIONS);
    Object.keys(pickedStyles).map(function (key) {
      sizeStyles[key] = pickedStyles[key] + "px";
    });
    return /*#__PURE__*/React.createElement("div", {
      id: id,
      style: _extends(_extends({}, style), sizeStyles),
      className: this.getClass() + " " + className
    }, loading ? /*#__PURE__*/React.createElement(ProgressLinear, {
      active: true,
      fillHeight: true,
      height: 4,
      dark: dark,
      indeterminate: true,
      color: "var(--primary)"
    }) : null, cardChildren);
  };

  return Card;
}(React.Component);

Card.displayName = 'NuCard';
Card.defaultProps = _extends(_extends({
  disabled: false
}, DEFAULT_PROPS), COMMON_CARD_DEFAULT_PROPS);
Card.propTypes = CARD_PROP_TYPES;

var List = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(List, _React$Component);

  function List() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = List.prototype;

  _proto.render = function render() {
    return /*#__PURE__*/React.createElement("div", null, "list");
  };

  return List;
}(React.Component);

List.displayName = 'NuList';
List.defaultProps = DEFAULT_PROPS;
List.propTypes = DEFAULT_PROPS_TYPE;

var styles$6 = {"nu-list":"_1e1Zo","nu-list-item":"_1fAxu","nu-list-item--light":"_3qLrW","nu-list-item--dark":"_VAjCd","nu-list-item--raised":"_en55A","nu-list-item--link":"_1U34y","nu-list-item--dense":"_2M8O0","nu-list-item--rounded":"_HIndY","nu-list-item--disabled":"_G0QTg","nu-list-item--two-line":"_3j39Z","nu-list-item-title":"_3O9iB","nu-list-item-subtitle":"_14Sbl","nu-list-item--active":"_2n-jE","nu-list-item--inactive":"_3Q1QT"};

var ListItem = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(ListItem, _React$Component);

  function ListItem() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = ListItem.prototype;

  _proto.getClasses = function getClasses(elem) {
    var _this$props = this.props,
        dark = _this$props.dark,
        link = _this$props.link,
        dense = _this$props.dense,
        active = _this$props.active,
        raised = _this$props.raised,
        rounded = _this$props.rounded,
        inActive = _this$props.inActive,
        disabled = _this$props.disabled,
        twoLineSubtitle = _this$props.twoLineSubtitle;

    if (elem === 'list-item') {
      return getModuleClasses(styles$6, "\n          nu-list-item\n          " + (link ? 'nu-list-item--link' : '') + "\n          " + (dense ? 'nu-list-item--dense' : '') + "\n          " + (active ? 'nu-list-item--active' : '') + "\n          " + (raised ? 'nu-list-item--raised' : '') + "\n          " + (rounded ? 'nu-list-item--rounded' : '') + "\n          " + (inActive ? 'nu-list-item--inactive' : '') + "\n          " + (disabled ? 'nu-list-item--disabled' : '') + "\n          " + (twoLineSubtitle ? 'nu-list-item--two-line' : '') + "\n          nu-list-item--" + (dark ? 'dark' : 'light') + "\n        ");
    } else {
      return getModuleClasses(styles$6, elem);
    }
  };

  _proto.render = function render() {
    var _this$props2 = this.props,
        style = _this$props2.style,
        className = _this$props2.className;
    var events = pickKeys(this.props, ['onClick']);
    return /*#__PURE__*/React.createElement("div", _extends({}, events, {
      style: style,
      className: this.getClasses('list-item') + " " + className
    }), this.title, this.subtitle);
  };

  _createClass(ListItem, [{
    key: "title",
    get: function get() {
      var title = this.props.title;
      return title && /*#__PURE__*/React.createElement("div", {
        className: this.getClasses('nu-list-item-title')
      }, title);
    }
  }, {
    key: "subtitle",
    get: function get() {
      var _this$props3 = this.props,
          subtitle = _this$props3.subtitle,
          children = _this$props3.children;
      var content = children || subtitle;
      return content && /*#__PURE__*/React.createElement("div", {
        className: this.getClasses('nu-list-item-subtitle')
      }, content);
    }
  }]);

  return ListItem;
}(React.Component);

ListItem.displayName = 'NuListItem';
ListItem.defaultProps = DEFAULT_PROPS;
ListItem.propTypes = DEFAULT_PROPS_TYPE;

var ListItemGroup = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(ListItemGroup, _React$Component);

  function ListItemGroup(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.state = {
      active: props.value
    };
    return _this;
  }

  var _proto = ListItemGroup.prototype;

  _proto.getClasses = function getClasses(elem) {
    var dark = this.props.dark;

    if (elem === 'list') {
      return getModuleClasses(styles$6, "\n          nu-list\n          nu-list-item--" + (dark ? 'dark' : 'light') + "\n        ");
    } else {
      return getModuleClasses(styles$6, elem);
    }
  };

  _proto.handleClick = function handleClick(event, index, click) {
    var prevActive = this.state.active;
    var active = prevActive === index ? undefined : index;
    this.setState({
      active: active
    });
    var _this$props = this.props,
        onClick = _this$props.onClick,
        onChange = _this$props.onChange;
    callCallback(click, event);
    callCallback(onChange, {
      active: active
    });
    callCallback(onClick, {
      event: event,
      active: active
    });
  };

  _proto.render = function render() {
    var _this$props2 = this.props,
        style = _this$props2.style,
        className = _this$props2.className;
    return /*#__PURE__*/React.createElement("div", {
      style: style,
      className: this.getClasses('list') + " " + className
    }, this.children);
  };

  _createClass(ListItemGroup, [{
    key: "children",
    get: function get() {
      var _this2 = this;

      var active = this.state.active;
      var children = this.props.children;
      return passDownProp(Children.map(children, function (child, index) {
        if (child.type === ListItem) {
          return cloneElement(child, {
            active: active === index,
            onClick: function onClick(e) {
              return _this2.handleClick(e, index, child.onClick);
            }
          });
        }
      }), this.props, ['dark', 'link', 'dense', 'raised', 'rounded', 'inActive', 'disabled', 'twoLineSubtitle']);
    }
  }]);

  return ListItemGroup;
}(React.Component);

ListItemGroup.displayName = 'NuListItemGroup';
ListItemGroup.defaultProps = DEFAULT_PROPS;
ListItemGroup.propTypes = DEFAULT_PROPS_TYPE;

ListItemGroup.getDerivedStateFromProps = function (_ref) {
  var active = _ref.value,
      onClick = _ref.onClick;
  return onClick ? {
    active: active
  } : {};
};

var styles$7 = {"nu-h1":"_2RF0y","nu-h2":"_2b-UI","nu-h3":"_rTEEr","nu-h4":"_1N96j","nu-h5":"_2TwOi","nu-h6":"_2wZct","nu-subtitle-1":"_2BgaH","nu-subtitle-2":"_2vNlX","nu-body-1":"_NwSHs","nu-body-2":"_i_J81","nu-caption":"_2HbLl","nu-overline":"_1yuzT","nu-typography":"_3yPwv","nu-typography--primary":"_11JjB","nu-typography--light":"_1uvOH","nu-typography--dark":"_3PUqy","nu-typography--secondary":"_1QRSN","nu-typography--disabled":"_31wpR"};

var Typography = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Typography, _React$Component);

  function Typography() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.mapping = {
      h1: 'h1',
      h2: 'h2',
      h3: 'h3',
      h4: 'h4',
      h5: 'h5',
      h6: 'h6',
      caption: 'p',
      overline: 'p',
      'subtitle-1': 'p',
      'subtitle-2': 'p',
      'body-1': 'p',
      'body-2': 'p'
    };
    return _this;
  }

  var _proto = Typography.prototype;

  _proto.getTypographyType = function getTypographyType() {
    var _this$props = this.props,
        disabled = _this$props.disabled,
        secondary = _this$props.secondary;
    return disabled ? 'disabled' : secondary ? 'secondary' : 'primary';
  };

  _proto.getMapping = function getMapping() {
    var _this$props2 = this.props,
        type = _this$props2.type,
        component = _this$props2.component;
    return component || this.mapping[type || 'body-1'];
  };

  _proto.getClass = function getClass() {
    var _this$props3 = this.props,
        dark = _this$props3.dark,
        type = _this$props3.type;
    return getModuleClasses(styles$7, "\n        nu-typography\n        nu-" + (type || 'body-1') + "\n        nu-typography--" + this.getTypographyType() + "\n        nu-typography--" + (dark ? 'dark' : 'light') + "\n      ");
  };

  _proto.render = function render() {
    var _this$props4 = this.props,
        style = _this$props4.style,
        className = _this$props4.className;
    return createElement(this.getMapping(), {
      style: style,
      className: this.getClass() + " " + className
    }, this.props.children);
  };

  return Typography;
}(React.Component);

Typography.displayName = 'NuTypography';
Typography.defaultProps = DEFAULT_PROPS;
Typography.propTypes = _extends({
  type: G_STRING
}, TYPOGRAPHY_PROP_TYPES);

var H1 = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(H1, _React$Component);

  function H1() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = H1.prototype;

  _proto.render = function render() {
    return /*#__PURE__*/React.createElement(Typography, _extends({}, this.props, {
      type: "h1"
    }), this.props.children);
  };

  return H1;
}(React.Component);

H1.displayName = 'NuH1';
H1.defaultProps = DEFAULT_PROPS;
H1.propTypes = TYPOGRAPHY_PROP_TYPES;

var H2 = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(H2, _React$Component);

  function H2() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = H2.prototype;

  _proto.render = function render() {
    return /*#__PURE__*/React.createElement(Typography, _extends({}, this.props, {
      type: "h2"
    }), this.props.children);
  };

  return H2;
}(React.Component);

H2.displayName = 'NuH2';
H2.defaultProps = DEFAULT_PROPS;
H2.propTypes = TYPOGRAPHY_PROP_TYPES;

var H3 = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(H3, _React$Component);

  function H3() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = H3.prototype;

  _proto.render = function render() {
    return /*#__PURE__*/React.createElement(Typography, _extends({}, this.props, {
      type: "h3"
    }), this.props.children);
  };

  return H3;
}(React.Component);

H3.displayName = 'NuH3';
H3.defaultProps = DEFAULT_PROPS;
H3.propTypes = TYPOGRAPHY_PROP_TYPES;

var H4 = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(H4, _React$Component);

  function H4() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = H4.prototype;

  _proto.render = function render() {
    return /*#__PURE__*/React.createElement(Typography, _extends({}, this.props, {
      type: "h4"
    }), this.props.children);
  };

  return H4;
}(React.Component);

H4.displayName = 'NuH4';
H4.defaultProps = DEFAULT_PROPS;
H4.propTypes = TYPOGRAPHY_PROP_TYPES;

var H5 = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(H5, _React$Component);

  function H5() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = H5.prototype;

  _proto.render = function render() {
    return /*#__PURE__*/React.createElement(Typography, _extends({}, this.props, {
      type: "h5"
    }), this.props.children);
  };

  return H5;
}(React.Component);

H5.displayName = 'NuH5';
H5.defaultProps = DEFAULT_PROPS;
H5.propTypes = TYPOGRAPHY_PROP_TYPES;

var H6 = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(H6, _React$Component);

  function H6() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = H6.prototype;

  _proto.render = function render() {
    return /*#__PURE__*/React.createElement(Typography, _extends({}, this.props, {
      type: "h6"
    }), this.props.children);
  };

  return H6;
}(React.Component);

H6.displayName = 'NuH6';
H6.defaultProps = DEFAULT_PROPS;
H6.propTypes = TYPOGRAPHY_PROP_TYPES;

var Body1 = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Body1, _React$Component);

  function Body1() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Body1.prototype;

  _proto.render = function render() {
    return /*#__PURE__*/React.createElement(Typography, _extends({}, this.props, {
      type: "body-1"
    }), this.props.children);
  };

  return Body1;
}(React.Component);

Body1.displayName = 'NuBody1';
Body1.defaultProps = DEFAULT_PROPS;
Body1.propTypes = TYPOGRAPHY_PROP_TYPES;

var Body2 = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Body2, _React$Component);

  function Body2() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Body2.prototype;

  _proto.render = function render() {
    return /*#__PURE__*/React.createElement(Typography, _extends({}, this.props, {
      type: "body-2"
    }), this.props.children);
  };

  return Body2;
}(React.Component);

Body2.displayName = 'NuBody2';
Body2.defaultProps = DEFAULT_PROPS;
Body2.propTypes = TYPOGRAPHY_PROP_TYPES;

var Caption = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Caption, _React$Component);

  function Caption() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Caption.prototype;

  _proto.render = function render() {
    return /*#__PURE__*/React.createElement(Typography, _extends({}, this.props, {
      type: "caption"
    }), this.props.children);
  };

  return Caption;
}(React.Component);

Caption.displayName = 'NuCaption';
Caption.defaultProps = DEFAULT_PROPS;
Caption.propTypes = TYPOGRAPHY_PROP_TYPES;

var Overline = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Overline, _React$Component);

  function Overline() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Overline.prototype;

  _proto.render = function render() {
    return /*#__PURE__*/React.createElement(Typography, _extends({}, this.props, {
      type: "overline"
    }), this.props.children);
  };

  return Overline;
}(React.Component);

Overline.displayName = 'NuOverline';
Overline.defaultProps = DEFAULT_PROPS;
Overline.propTypes = TYPOGRAPHY_PROP_TYPES;

var Subtitle1 = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Subtitle1, _React$Component);

  function Subtitle1() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Subtitle1.prototype;

  _proto.render = function render() {
    return /*#__PURE__*/React.createElement(Typography, _extends({}, this.props, {
      type: "subtitle-1"
    }), this.props.children);
  };

  return Subtitle1;
}(React.Component);

Subtitle1.displayName = 'NuSubtitle1';
Subtitle1.defaultProps = DEFAULT_PROPS;
Subtitle1.propTypes = TYPOGRAPHY_PROP_TYPES;

var Subtitle2 = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Subtitle2, _React$Component);

  function Subtitle2() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Subtitle2.prototype;

  _proto.render = function render() {
    return /*#__PURE__*/React.createElement(Typography, _extends({}, this.props, {
      type: "subtitle-2"
    }), this.props.children);
  };

  return Subtitle2;
}(React.Component);

Subtitle2.displayName = 'NuSubtitle2';
Subtitle2.defaultProps = DEFAULT_PROPS;
Subtitle2.propTypes = TYPOGRAPHY_PROP_TYPES;

var styles$8 = {"nu-progress-linear":"_2M5iY","nu-progress-linear--bordered":"_1FvLK","nu-progress-linear--light":"_20rTC","nu-progress-circular":"__234s","nu-progress-circular--light":"_2YVD0","nu-progress-linear--dark":"_2x6H_","nu-progress-circular--dark":"_2clvw","nu-progress-linear--bg-wrapper":"_1wWaA","nu-progress-linear--bg-filled":"_1PN0w","nu-progress-linear--bg":"_29wbC","nu-progress-linear--striped":"_1aHNB","nu-progress-linear--indeterminate":"_2wIvQ","indeterminate-progress":"_1Q5K8","nu-progress-circular--inner":"_1iTMT","nu-progress-circular--outer":"_3Jx6J","nu-progress-circular--label":"_2hjq3","nu-progress-circular--svg":"_1QMv-","nu-progress-circular--not-elevated":"_NijRA","nu-progress-circular--elevated":"_2Ymai","nu-progress-circular--flat":"_3OXzH","nu-progress-circular--circle":"_53Md9","nu-progress-circular--indeterminate":"_2vn3-","svg-animation":"_1cNbz","dash-animate":"_31C0g"};

var ProgressCircular = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(ProgressCircular, _React$Component);

  function ProgressCircular(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.state = {
      id: uid()
    };
    return _this;
  }

  var _proto = ProgressCircular.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var _this$props = this.props,
        color = _this$props.color,
        disabled = _this$props.disabled;
    var elem = document.getElementById(this.state.id);

    if (!disabled) {
      setCSSVariable(elem, '--selector-bg', color);
    }
  };

  _proto.getClasses = function getClasses(classType) {
    var _this$props2 = this.props,
        dark = _this$props2.dark,
        flat = _this$props2.flat,
        elevated = _this$props2.elevated;

    if (classType === 'progress') {
      return getModuleClasses(styles$8, " nu-progress-circular\n          nu-progress-circular--" + (flat ? 'flat' : '') + "\n          nu-progress-circular--" + (dark ? 'dark' : 'light') + "\n          nu-progress-circular--" + (elevated ? 'elevated' : 'not-elevated') + "\n        ");
    } else {
      return getModuleClasses(styles$8, "nu-progress-circular--" + classType);
    }
  };

  _proto.calcStrokeDashArrayOffset = function calcStrokeDashArrayOffset(value) {
    return (100 - value) / 100 * this.circumference;
  };

  _proto.render = function render() {
    var _this$props3 = this.props,
        size = _this$props3.size,
        width = _this$props3.width,
        style = _this$props3.style,
        label = _this$props3.label,
        children = _this$props3.children,
        className = _this$props3.className,
        indeterminate = _this$props3.indeterminate;
    return /*#__PURE__*/React.createElement("div", {
      id: this.state.id,
      "aria-valuemin": "0",
      role: "progressbar",
      "aria-valuemax": "100",
      "aria-valuenow": this.normalizedValue,
      className: this.getClasses('progress') + " " + className,
      style: _extends(_extends({}, style), {}, {
        width: size + 9 + "px",
        height: size + 9 + "px"
      })
    }, /*#__PURE__*/React.createElement("div", {
      className: "" + this.getClasses('svg'),
      style: {
        width: size + "px",
        height: size + "px",
        transform: "translate3d(-50%, -50%, 0) rotate(" + this.normalizedRotation + "deg)"
      }
    }, /*#__PURE__*/React.createElement("svg", {
      className: "" + (indeterminate ? this.getClasses('indeterminate') : ''),
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: this.viewBox
    }, /*#__PURE__*/React.createElement("circle", {
      r: this.radius,
      cx: 2 * this.viewBoxSize,
      cy: 2 * this.viewBoxSize,
      className: "" + this.getClasses('circle'),
      style: {
        strokeWidth: "" + width,
        strokeDasharray: this.strokeDashArray,
        strokeDashoffset: indeterminate ? this.calcStrokeDashArrayOffset(0) : this.strokeDashArrayOffset
      }
    }))), /*#__PURE__*/React.createElement("div", {
      className: "" + this.getClasses('outer'),
      style: {
        width: size + 5 + "px",
        height: size + 5 + "px"
      }
    }), /*#__PURE__*/React.createElement("div", {
      className: "" + this.getClasses('inner'),
      style: {
        width: size - width * 2 - 6 + "px",
        height: size - width * 2 - 6 + "px"
      }
    }), /*#__PURE__*/React.createElement("label", {
      className: "" + this.getClasses('label'),
      style: {
        fontSize: this.radius * 0.6 + "px"
      }
    }, children || label));
  };

  _createClass(ProgressCircular, [{
    key: "radius",
    get: function get() {
      return Number(this.props.size / 2);
    }
  }, {
    key: "circumference",
    get: function get() {
      return 2 * Math.PI * this.radius;
    }
  }, {
    key: "strokeDashArray",
    get: function get() {
      return Math.round(this.circumference * 1000) / 1000;
    }
  }, {
    key: "strokeDashArrayOffset",
    get: function get() {
      return this.calcStrokeDashArrayOffset(this.normalizedValue);
    }
  }, {
    key: "viewBox",
    get: function get() {
      return this.viewBoxSize + " " + this.viewBoxSize + " " + 2 * this.viewBoxSize + " " + 2 * this.viewBoxSize;
    }
  }, {
    key: "viewBoxSize",
    get: function get() {
      var _this$props4 = this.props,
          width = _this$props4.width,
          size = _this$props4.size;
      return this.radius / (1 - Number(width) / Number(size));
    }
  }, {
    key: "normalizedValue",
    get: function get() {
      var value = this.props.value;
      return value ? value > 100 ? 100 : value < 0 ? 0 : value : 0;
    }
  }, {
    key: "normalizedRotation",
    get: function get() {
      var rotate = this.props.rotate;
      return rotate ? rotate > 360 ? 360 : rotate < 0 ? 0 : rotate : 0;
    }
  }]);

  return ProgressCircular;
}(React.Component);

ProgressCircular.displayName = 'NuProgressCircular';
ProgressCircular.defaultProps = PROGRESS_CIRCULAR_DEFAULT_PROPS;
ProgressCircular.propTypes = PROGRESS_CIRCULAR_PROP_TYPES;

var ProgressLinear = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(ProgressLinear, _React$Component);

  function ProgressLinear(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.state = {
      id: uid()
    };
    return _this;
  }

  var _proto = ProgressLinear.prototype;

  _proto.getClasses = function getClasses(classType) {
    var _this$props = this.props,
        dark = _this$props.dark,
        striped = _this$props.striped,
        bordered = _this$props.bordered,
        indeterminate = _this$props.indeterminate,
        fillHeight = _this$props.fillHeight;

    switch (classType) {
      case 'progress':
        return getModuleClasses(styles$8, "\n            nu-progress-linear\n            nu-progress-linear--" + (dark ? 'dark' : 'light') + "\n            " + (bordered ? 'nu-progress-linear--bordered' : '') + "\n          ");

      case 'bg':
        return getModuleClasses(styles$8, "\n            nu-progress-linear--bg\n            " + (striped ? 'nu-progress-linear--striped' : '') + "\n            " + (indeterminate ? 'nu-progress-linear--indeterminate' : '') + "\n          ");

      case 'bg-wrapper':
        return getModuleClasses(styles$8, "\n            nu-progress-linear--bg-wrapper\n            " + (fillHeight ? 'nu-progress-linear--bg-filled' : '') + "\n          ");
    }
  };

  _proto.getHeightStyle = function getHeightStyle(height) {
    var active = this.props.active;
    return {
      height: (active ? height : 0) + "px",
      borderRadius: height * 2 + "px"
    };
  };

  _proto.componentDidMount = function componentDidMount() {
    var _this$props2 = this.props,
        color = _this$props2.color,
        disabled = _this$props2.disabled;
    var elem = document.getElementById(this.state.id);

    if (!disabled) {
      setCSSVariable(elem, '--selector-bg', color);
    }
  };

  _proto.render = function render() {
    var _this$props3 = this.props,
        style = _this$props3.style,
        height = _this$props3.height,
        className = _this$props3.className,
        fillHeight = _this$props3.fillHeight,
        indeterminate = _this$props3.indeterminate;
    return /*#__PURE__*/React.createElement("div", {
      "aria-valuemin": "0",
      role: "progressbar",
      "aria-valuemax": "100",
      "aria-valuenow": this.value,
      style: _extends(_extends({}, style), this.getHeightStyle(height)),
      className: this.getClasses('progress') + " " + className
    }, /*#__PURE__*/React.createElement("div", {
      style: {
        borderRadius: height * 2 + "px"
      },
      className: "" + this.getClasses('bg-wrapper')
    }, /*#__PURE__*/React.createElement("div", {
      id: this.state.id,
      className: "" + this.getClasses('bg'),
      style: _extends({
        width: (indeterminate ? 100 : this.value) + "%"
      }, this.getHeightStyle(fillHeight ? height : height - 5))
    })));
  };

  _createClass(ProgressLinear, [{
    key: "value",
    get: function get() {
      var value = this.props.value;
      return value > 100 ? 100 : value < 0 ? 0 : value;
    }
  }]);

  return ProgressLinear;
}(React.Component);

ProgressLinear.displayName = 'NuProgressLinear';
ProgressLinear.defaultProps = PROGRESS_LINEAR_DEFAULT_PROPS;
ProgressLinear.propTypes = PROGRESS_LINEAR_PROP_TYPES;

var styles$9 = {"nu-carousel":"_3vnt0","nu-carousel--light":"_1FIJN","nu-carousel--dark":"_3vJ-u","nu-carousel-container":"_PpWcw","nu-carousel-controls":"_3JvVb","nu-carousel-delimiter":"_3waoy","nu-carousel-delimiter--active":"_3xiPD","nu-carousel-arrow":"_1O7aA","nu-carousel-arrow--prev":"_3GhlB","nu-carousel-arrow--next":"_3utEv","nu-carousel-arrow--always":"_3sFhv","nu-carousel-item":"_1c_yW"};

var CarouselItem = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(CarouselItem, _React$Component);

  function CarouselItem() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = CarouselItem.prototype;

  _proto.getClasses = function getClasses(type) {
    return getModuleClasses(styles$9, type);
  };

  _proto.render = function render() {
    var _this$props = this.props,
        style = _this$props.style,
        className = _this$props.className,
        children = _this$props.children;
    return /*#__PURE__*/React.createElement("div", {
      style: style,
      className: this.getClasses('nu-carousel-item') + " " + className
    }, passDownProp(children, this.props, ['dark']));
  };

  return CarouselItem;
}(React.Component);

CarouselItem.displayName = 'NuCarouselItem';
CarouselItem.defaultProps = DEFAULT_PROPS;
CarouselItem.propTypes = DEFAULT_PROPS_TYPE;

var Carousel = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Carousel, _React$Component);

  function Carousel(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.state = {
      prevActive: 0,
      disabled: false,
      active: props.value || 0
    };
    return _this;
  }

  var _proto = Carousel.prototype;

  _proto.getDelimiters = function getDelimiters(items) {
    var _this2 = this;

    var active = this.state.active;
    var _this$props = this.props,
        delimiterIcon = _this$props.delimiterIcon,
        activeDelimiterIcon = _this$props.activeDelimiterIcon;
    return items.map(function (item, index) {
      return /*#__PURE__*/React.createElement("div", {
        key: index,
        className: (!delimiterIcon ? _this2.getClasses('nu-carousel-delimiter') : '') + " " + (active === index && !delimiterIcon ? _this2.getClasses('nu-carousel-delimiter--active') : ''),
        onClick: function onClick(e) {
          return _this2.handleDelimiterClick(e, index);
        }
      }, active === index ? activeDelimiterIcon || delimiterIcon : delimiterIcon);
    });
  };

  _proto.getClasses = function getClasses(type) {
    var dark = this.props.dark;

    switch (type) {
      case 'main':
        return getModuleClasses(styles$9, "\n            nu-carousel\n            nu-carousel--" + (dark ? 'dark' : 'light') + "\n          ");

      default:
        return getModuleClasses(styles$9, type);
    }
  };

  _proto.nextSlide = function nextSlide() {
    var children = this.props.children;
    var itemsLength = children.length;
    var _this$state = this.state,
        active = _this$state.active,
        disabled = _this$state.disabled;

    if (itemsLength && !disabled) {
      var next = active + 1 >= itemsLength ? 0 : active + 1;
      this.updateActiveState(next, active);
    }
  };

  _proto.prevSlide = function prevSlide() {
    var children = this.props.children;
    var itemsLength = children.length;
    var _this$state2 = this.state,
        active = _this$state2.active,
        disabled = _this$state2.disabled;

    if (itemsLength && !disabled) {
      var next = active - 1 < 0 ? itemsLength - 1 : active - 1;
      this.updateActiveState(next, active);
    }
  };

  _proto.startTimer = function startTimer() {
    var _this3 = this;

    if (this.props.cycle) {
      this.timer = setInterval(function () {
        _this3.stopTimeout();

        _this3.nextSlide();

        _this3.startTimeout();
      }, this.props.interval);
    }
  };

  _proto.stopTimer = function stopTimer() {
    if (this.props.cycle) {
      clearInterval(this.timer);
    }
  };

  _proto.startTimeout = function startTimeout() {
    var _this4 = this;

    this.setState({
      disabled: true
    });
    this.disabledTimeout = setTimeout(function () {
      _this4.setState({
        disabled: false
      });
    }, 300);
  };

  _proto.stopTimeout = function stopTimeout() {
    clearTimeout(this.disabledTimeout);
  };

  _proto.toggleClocks = function toggleClocks(action) {
    if (action === void 0) {
      action = 'stop';
    }

    this[action + "Timer"]();
    this[action + "Timeout"]();
  };

  _proto.updateActiveState = function updateActiveState(active, prevActive) {
    this.setState({
      active: active
    });
    this.setState({
      prevActive: prevActive
    });
  };

  _proto.handleIconClick = function handleIconClick(direction) {
    this.toggleClocks();
    this[direction + "Slide"]();
    this.toggleClocks('start');
  };

  _proto.handleDelimiterClick = function handleDelimiterClick(e, active) {
    var onDelimiterClick = this.props.onDelimiterClick;
    this.toggleClocks();
    this.updateActiveState(active, this.state.active);
    this.toggleClocks('start');
    callCallback(onDelimiterClick, e);
  };

  _proto.componentDidMount = function componentDidMount() {
    if (this.props.cycle) {
      this.startTimer();
    }
  };

  _proto.componentDidUpdate = function componentDidUpdate(props, state) {
    var active = this.state.active;

    if (JSON.stringify(state.active) !== JSON.stringify(active)) {
      callCallback(props.onChange, {
        active: active
      });
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.stopTimer();
    this.stopTimeout();
  };

  _proto.render = function render() {
    var items = this.carouselItems;
    var _this$props2 = this.props,
        style = _this$props2.style,
        className = _this$props2.className,
        hideDelimiters = _this$props2.hideDelimiters;
    return /*#__PURE__*/React.createElement("div", {
      style: _extends(_extends({}, this.styles), style),
      className: this.getClasses('main') + " " + className
    }, /*#__PURE__*/React.createElement("div", {
      className: this.getClasses('nu-carousel-container')
    }, items), hideDelimiters ? null : /*#__PURE__*/React.createElement("div", {
      className: this.getClasses('nu-carousel-controls')
    }, this.getDelimiters(items)), this.nextIcon, this.prevIcon);
  };

  _createClass(Carousel, [{
    key: "axis",
    get: function get() {
      var vertical = this.props.vertical;
      return vertical ? 'Y' : 'X';
    }
  }, {
    key: "styles",
    get: function get() {
      var height = this.props.height;
      return {
        height: height
      };
    }
  }, {
    key: "carouselItems",
    get: function get() {
      var _this5 = this;

      var _this$state3 = this.state,
          active = _this$state3.active,
          prevActive = _this$state3.prevActive;
      var _this$props3 = this.props,
          children = _this$props3.children,
          reverseProp = _this$props3.reverse,
          continuous = _this$props3.continuous;
      var reverse = prevActive < active;

      if (continuous) {
        var lastIndex = children.length - 1;
        if (active === 0 && prevActive === lastIndex) reverse = true;
        if (prevActive === 0 && active === lastIndex) reverse = false;
      }

      reverse = reverseProp ? !reverse : reverse;
      return passDownProp(Children.map(children, function (child, index) {
        return /*#__PURE__*/React.createElement(SlideCarousel, {
          appear: true,
          axis: _this5.axis,
          reverse: reverse,
          "in": index === active
        }, child);
      }), this.props, ['dark']);
    }
  }, {
    key: "nextIcon",
    get: function get() {
      var _this6 = this;

      var _this$props4 = this.props,
          nextIcon = _this$props4.nextIcon,
          showArrows = _this$props4.showArrows,
          showArrowsOnHover = _this$props4.showArrowsOnHover;
      if (!showArrows) return null;
      var classes = this.getClasses('nu-carousel-arrow nu-carousel-arrow--next') + " " + (!showArrowsOnHover ? this.getClasses('nu-carousel-arrow--always') : '');
      var icon = /*#__PURE__*/React.createElement("div", {
        className: classes,
        onClick: function onClick() {
          return _this6.handleIconClick('next');
        }
      }, nextIcon || /*#__PURE__*/React.createElement("span", null, "\u203A"));
      return icon;
    }
  }, {
    key: "prevIcon",
    get: function get() {
      var _this7 = this;

      var _this$props5 = this.props,
          prevIcon = _this$props5.prevIcon,
          showArrows = _this$props5.showArrows,
          showArrowsOnHover = _this$props5.showArrowsOnHover;
      if (!showArrows) return null;
      var classes = this.getClasses('nu-carousel-arrow nu-carousel-arrow--prev') + " " + (!showArrowsOnHover ? this.getClasses('nu-carousel-arrow--always') : '');
      var icon = /*#__PURE__*/React.createElement("div", {
        className: classes,
        onClick: function onClick() {
          return _this7.handleIconClick('prev');
        }
      }, prevIcon || /*#__PURE__*/React.createElement("span", null, "\u203A"));
      return icon;
    }
  }]);

  return Carousel;
}(React.Component);

Carousel.displayName = 'NuCarousel';
Carousel.defaultProps = CAROUSEL_DEFAULT_PROPS;
Carousel.propTypes = CAROUSEL_PROP_TYPES;

var styles$a = {"nu-parallax":"_2izpl","nu-parallax--img-container":"_6iOKN","nu-parallax--img":"_2U2Zh"};

var Parallax = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Parallax, _React$Component);

  function Parallax(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.state = {
      parallax: 0
    };
    _this.handleScroll = _this.handleScroll.bind(_assertThisInitialized(_this));
    return _this;
  }

  var _proto = Parallax.prototype;

  _proto.handleScroll = function handleScroll(e) {
    var _this$props = this.props,
        imageHeight = _this$props.imageHeight,
        height = _this$props.height,
        speed = _this$props.speed;
    var parallaxDist = imageHeight - height;
    var parallax = 0;
    var scrollTop = 0;
    var windowHeight = 0;
    var percentScrolled = 0;
    var windowScrollHeight = 1;

    if (this.state.container) {
      windowHeight = e.target.offsetHeight;
      scrollTop = Math.round(e.target.scrollTop);
      windowScrollHeight = e.target.scrollHeight;
      percentScrolled = scrollTop / (windowScrollHeight - windowHeight);
    } else {
      var doc = document.documentElement || document.body;
      scrollTop = doc.scrollTop;
      windowHeight = doc.clientHeight;
      windowScrollHeight = doc.scrollHeight;
      percentScrolled = scrollTop / (windowScrollHeight - windowHeight);
    }

    parallax = Math.round(parallaxDist * percentScrolled * speed);
    this.setState({
      parallax: parallax
    });
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    var container = this.state.container;

    if (container) {
      container.removeEventListener('scroll', this.handleScroll);
    } else {
      document.removeEventListener('scroll', this.handleScroll);
    }
  };

  _proto.componentDidMount = function componentDidMount() {
    var _this2 = this;

    this.setState(function (state) {
      var containerId = _this2.props.containerId;
      var container = document.getElementById(containerId);

      if (container) {
        container.addEventListener('scroll', _this2.handleScroll);
      } else {
        document.addEventListener('scroll', _this2.handleScroll);
      }

      return _extends(_extends({}, state), {}, {
        container: container
      });
    });
  };

  _proto.getClass = function getClass(type) {
    return getModuleClasses(styles$a, type);
  };

  _proto.render = function render() {
    var _this$props2 = this.props,
        style = _this$props2.style,
        height = _this$props2.height,
        className = _this$props2.className;
    return /*#__PURE__*/React.createElement("div", {
      style: _extends(_extends({}, style), {}, {
        height: height + "px"
      }),
      className: this.getClass('nu-parallax') + " " + className
    }, this.parallaxImage);
  };

  _createClass(Parallax, [{
    key: "parallaxImage",
    get: function get() {
      var parallax = this.state.parallax;
      var _this$props3 = this.props,
          src = _this$props3.src,
          alt = _this$props3.alt,
          loaded = _this$props3.loaded;

      if (src && loaded) {
        return /*#__PURE__*/React.createElement("div", {
          className: this.getClass('nu-parallax--img-container')
        }, /*#__PURE__*/React.createElement("img", {
          alt: alt,
          src: src,
          className: this.getClass('nu-parallax--img'),
          style: {
            transform: "translate(-50%, " + parallax + "px)"
          }
        }));
      } else {
        return null;
      }
    }
  }]);

  return Parallax;
}(React.Component);

Parallax.displayName = 'NuParallax';
Parallax.defaultProps = _extends({
  speed: 1,
  height: 400
}, DEFAULT_PROPS);
Parallax.propTypes = _extends({
  speed: G_NUM,
  alt: G_STRING,
  src: G_STRING,
  height: G_NUM,
  containerId: G_STRING
}, DEFAULT_PROPS_TYPE);
var Parallax$1 = withImage(Parallax);

var styles$b = {"nu-divider":"_1RYKi","nu-divider--light":"_1P-G7","nu-divider--dark":"_OnFhH","nu-divider--dense":"_2u50z","nu-divider--elevated":"_3O_dH"};

var Divider = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Divider, _React$Component);

  function Divider() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Divider.prototype;

  _proto.getClasses = function getClasses() {
    var _this$props = this.props,
        dark = _this$props.dark,
        dense = _this$props.dense,
        elevated = _this$props.elevated;
    return getModuleClasses(styles$b, "\n        nu-divider\n        " + (dense ? 'nu-divider--dense' : '') + "\n        nu-divider--" + (dark ? 'dark' : 'light') + "\n        " + (elevated ? 'nu-divider--elevated' : '') + "\n      ");
  };

  _proto.render = function render() {
    var _this$props2 = this.props,
        style = _this$props2.style,
        className = _this$props2.className;
    return /*#__PURE__*/React.createElement("hr", {
      style: style,
      className: this.getClasses() + " " + className
    });
  };

  return Divider;
}(React.Component);

Divider.displayName = 'NuDivider';
Divider.defaultProps = DEFAULT_PROPS;
Divider.propTypes = _extends({
  dense: G_BOOL,
  elevated: G_BOOL
}, DEFAULT_PROPS_TYPE);

var styles$c = {"nu-tooltip":"_19-yK"};

var Tooltip = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Tooltip, _React$Component);

  function Tooltip(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.state = {
      id: uid(),
      active: false,
      pos: {
        top: 0,
        left: 0
      }
    };
    _this.controlled = props.visible !== undefined;
    _this.calcPosition = _this.calcPosition.bind(_assertThisInitialized(_this));
    _this.handleMouseOnToolTip = _this.handleMouseOnToolTip.bind(_assertThisInitialized(_this));
    return _this;
  }

  var _proto = Tooltip.prototype;

  _proto.getClasses = function getClasses(type) {
    switch (type) {
      case 'tooltip':
        return getModuleClasses(styles$c, 'nu-tooltip');

      default:
        return getModuleClasses(styles$c, type);
    }
  };

  _proto.calcPosition = function calcPosition() {
    var _this$props = this.props,
        top = _this$props.top,
        left = _this$props.left,
        right = _this$props.right;
    var tooltip = document.getElementById(this.state.id);
    var tooltipDimensions = tooltip.getBoundingClientRect();
    var nodeDimension = this.node.getBoundingClientRect();
    var nT = nodeDimension.top,
        nL = nodeDimension.left,
        nR = nodeDimension.right,
        nW = nodeDimension.width,
        nH = nodeDimension.height,
        nB = nodeDimension.bottom;
    var tW = tooltipDimensions.width,
        tH = tooltipDimensions.height;
    var pos = {
      top: 0,
      left: 0
    };

    if (top) {
      pos.top = nT - tH - 16;
      pos.left = nL + nW / 2 - tW / 2;
    } else if (left) {
      pos.top = nT - tH / 2 + nH / 2;
      pos.left = nL - tW - 16;
    } else if (right) {
      pos.top = nT - tH / 2 + nH / 2;
      pos.left = nR + 16;
    } else {
      pos.top = nB + 16;
      pos.left = nL + nW / 2 - tW / 2;
    }

    this.setState({
      pos: pos
    });
  };

  _proto.handleMouseOnToolTip = function handleMouseOnToolTip(e, callback) {
    var _this$props2 = this.props,
        onOpen = _this$props2.onOpen,
        onClose = _this$props2.onClose;
    var isOver = e.type === 'mouseenter';

    if (!this.controlled) {
      this.setState({
        active: isOver
      });
    }

    callCallback(callback, e);
    callCallback(isOver ? onOpen : onClose, isOver);
  };

  _proto.componentDidMount = function componentDidMount() {
    this.calcPosition();
    document.addEventListener('scroll', this.calcPosition, true);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    document.removeEventListener('scroll', this.calcPosition, true);
  };

  _proto.render = function render() {
    var _this$props3 = this.props,
        style = _this$props3.style,
        className = _this$props3.className;
    var children = passDownProp(this.tooltipChildren, this.props, ['dark']);
    return /*#__PURE__*/React.createElement("div", {
      style: style,
      className: className
    }, children, this.tooltip);
  };

  _createClass(Tooltip, [{
    key: "canView",
    get: function get() {
      return this.controlled ? this.props.visible : this.state.active;
    }
  }, {
    key: "origin",
    get: function get() {
      var d = ' center';
      var _this$props4 = this.props,
          top = _this$props4.top,
          left = _this$props4.left,
          bottom = _this$props4.bottom,
          right = _this$props4.right;
      if (top) return 'bottom' + d;
      if (left) return 'right' + d;
      if (right) return 'left' + d;
      if (bottom) return 'top' + d;
      return 'top' + d;
    }
  }, {
    key: "styles",
    get: function get() {
      var sizeStyles = {};
      var pos = this.state.pos;
      var pickedStyles = pickKeys(this.props, CSS_DIMENSIONS);
      Object.keys(pickedStyles).map(function (key) {
        return sizeStyles[key] = pickedStyles[key] + "px";
      });
      return _extends({
        top: pos.top + "px",
        left: pos.left + "px"
      }, sizeStyles);
    }
  }, {
    key: "tooltip",
    get: function get() {
      var _this$props5 = this.props,
          content = _this$props5.content,
          transitionProps = _this$props5.transitionProps,
          Transition = _this$props5.transition;
      var pickedProps = pickKeys(this.props, ['dark', 'inset']);
      return createPortal( /*#__PURE__*/React.createElement(Transition, _extends({
        origin: this.origin
      }, transitionProps, {
        "in": this.canView,
        appear: true
      }), /*#__PURE__*/React.createElement(Card, _extends({}, pickedProps, {
        role: "tooltip",
        id: this.state.id,
        style: this.styles,
        className: "" + this.getClasses('tooltip')
      }), content)), document.body);
    }
  }, {
    key: "tooltipChildren",
    get: function get() {
      var _this2 = this;

      return Children.map(this.props.children, function (child, i) {
        if (i === 0) {
          var _ref = child.props || {},
              _onMouseLeave = _ref.onMouseLeave,
              onMouseOver = _ref.onMouseOver,
              cc = _ref.className;

          var cls = ((cc || '') + " " + _this2.getClasses('cursor-pointer')).trim();

          var newProps = _extends(_extends({}, child.props), {}, {
            className: cls,
            ref: function ref(_ref2) {
              return _this2.node = findDOMNode(_ref2);
            },
            onMouseEnter: function onMouseEnter(e) {
              return _this2.handleMouseOnToolTip(e, onMouseOver);
            },
            onMouseLeave: function onMouseLeave(e) {
              return _this2.handleMouseOnToolTip(e, _onMouseLeave);
            }
          });

          return typeof child === 'string' ? createElement('span', newProps, child) : cloneElement(child, newProps);
        }
      });
    }
  }]);

  return Tooltip;
}(React.Component);

Tooltip.displayName = 'NuTooltip';
Tooltip.defaultProps = _extends({
  bottom: true,
  transition: Grow,
  transitionProps: {}
}, DEFAULT_PROPS);
Tooltip.propTypes = TOOLTIP_PROP_TYPES;

var Spacer = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Spacer, _React$Component);

  function Spacer() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Spacer.prototype;

  _proto.render = function render() {
    return /*#__PURE__*/React.createElement("div", {
      style: {
        flexGrow: '1'
      }
    });
  };

  return Spacer;
}(React.Component);

var styles$d = {"nu-dialog":"_3TFIz","nu-dialog--light":"_1wCKz","nu-dialog--dark":"_3mO7A","nu-dialog-overlay":"_3Reny","nu-dialog-content":"_2Vz13"};

var Dialog = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Dialog, _React$Component);

  function Dialog(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.handleClickInside = _this.handleClickInside.bind(_assertThisInitialized(_this));
    return _this;
  }

  var _proto = Dialog.prototype;

  _proto.getClasses = function getClasses(name) {
    var dark = this.props.dark;

    switch (name) {
      case 'dialog':
        return getModuleClasses(styles$d, "\n            nu-dialog\n            nu-dialog--" + (dark ? 'dark' : 'light') + "\n          ");

      default:
        return getModuleClasses(styles$d, name);
    }
  };

  _proto.handleClickInside = function handleClickInside(e) {
    var contentDOM = document.getElementById('nudialogcontent');
    var isContentClicked = findClickInside(e, contentDOM);
    var _this$props = this.props,
        onClose = _this$props.onClose,
        persistent = _this$props.persistent;

    if (!isContentClicked && !persistent) {
      callCallback(onClose, true);
    }
  };

  _proto.changeBodyAttrs = function changeBodyAttrs() {
    var visible = this.props.visible;

    if (visible) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = null;
    }
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    this.changeBodyAttrs();
  };

  _proto.componentDidMount = function componentDidMount() {
    this.changeBodyAttrs();
  };

  _proto.render = function render() {
    var visible = this.props.visible;
    return visible ? this.dialog : null;
  };

  _createClass(Dialog, [{
    key: "dialog",
    get: function get() {
      var sizeStyles = {};
      var _this$props2 = this.props,
          style = _this$props2.style,
          visible = _this$props2.visible,
          children = _this$props2.children,
          className = _this$props2.className;
      var dialogChildren = passDownProp(children, this.props, ['dark']);
      var pickedStyles = pickKeys(this.props, CSS_DIMENSIONS);
      Object.keys(pickedStyles).map(function (key) {
        return sizeStyles[key] = pickedStyles[key] + "px";
      });
      return createPortal( /*#__PURE__*/React.createElement("div", {
        role: "dialog",
        onClick: this.handleClickInside,
        className: this.getClasses('dialog')
      }, /*#__PURE__*/React.createElement("div", {
        className: this.getClasses('nu-dialog-overlay')
      }), /*#__PURE__*/React.createElement(Grow, {
        appear: true,
        "in": visible
      }, /*#__PURE__*/React.createElement("div", {
        role: "document",
        id: "nudialogcontent",
        style: _extends(_extends({}, sizeStyles), style),
        className: this.getClasses('nu-dialog-content') + " " + className
      }, dialogChildren))), document.body);
    }
  }]);

  return Dialog;
}(React.Component);

Dialog.displayName = 'NuDialog';
Dialog.defaultProps = _extends({
  visible: false
}, DEFAULT_PROPS);
Dialog.propTypes = DEFAULT_PROPS_TYPE;

var styles$e = {"nu-alert":"_2VbRb","nu-alert--light":"_1WOK3","nu-alert--dark":"_3Rm6c","nu-alert--dense":"_1pX9H","nu-alert--outlined":"_3af_p","nu-alert--closable":"_NpfzT","nu-alert--info":"_3i4gQ","nu-alert--error":"_fyVEY","nu-alert--warning":"_-ELKr","nu-alert--success":"_3FTCi","nu-alert--border-top":"_1I5lF","nu-alert--border-left":"_1sMNU","nu-alert--border-right":"_3HvGH","nu-alert--border-bottom":"_j4ouU","nu-alert-icon":"_1hCqZ","nu-alert-close":"_3YisC","nu-alert-close--icon":"_1b2BB"};

var Alert = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Alert, _React$Component);

  function Alert(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.state = {
      id: uid()
    };
    return _this;
  }

  var _proto = Alert.prototype;

  _proto.getClasses = function getClasses(name) {
    var _this$props = this.props,
        dense = _this$props.dense,
        outlined = _this$props.outlined,
        closable = _this$props.closable;

    switch (name) {
      case 'alert':
        return getModuleClasses(styles$e, "\n            nu-alert\n            " + (dense ? 'nu-alert--dense' : '') + "\n            " + (this.type ? "nu-alert--" + this.type : '') + "\n            " + (outlined ? 'nu-alert--outlined' : '') + "\n            " + (closable ? 'nu-alert--closable' : '') + "\n            " + (this.border ? "nu-alert--border-" + this.border : '') + "\n          ");

      default:
        return getModuleClasses(styles$e, name);
    }
  };

  _proto.setColor = function setColor() {
    var elem = document.getElementById(this.state.id);
    setCSSVariable(elem, '--text-color', this.props.color);
  };

  _proto.componentDidMount = function componentDidMount() {
    this.setColor();
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    this.setColor();
  };

  _proto.render = function render() {
    var _this$props2 = this.props,
        style = _this$props2.style,
        visible = _this$props2.visible,
        className = _this$props2.className,
        otherProps = _objectWithoutPropertiesLoose(_this$props2, ["style", "visible", "className"]);

    return visible ? /*#__PURE__*/React.createElement(Card, _extends({
      style: style
    }, otherProps, {
      id: this.state.id,
      className: this.getClasses('alert') + " " + className
    }), this.icon, this.alertChildren, /*#__PURE__*/React.createElement(Spacer, null), this.close) : null;
  };

  _createClass(Alert, [{
    key: "type",
    get: function get() {
      var _this2 = this;

      return CONTEXT_COLORS.find(function (t) {
        return t === _this2.props.type;
      }) || null;
    }
  }, {
    key: "border",
    get: function get() {
      var _this3 = this;

      return POSITIONS.find(function (t) {
        return t === _this3.props.border;
      }) || null;
    }
  }, {
    key: "icon",
    get: function get() {
      var _this$props3 = this.props,
          icon = _this$props3.icon,
          dense = _this$props3.dense;
      return icon && !dense ? /*#__PURE__*/React.createElement("span", {
        className: this.getClasses('nu-alert-icon')
      }, icon) : null;
    }
  }, {
    key: "close",
    get: function get() {
      var _this$props4 = this.props,
          onClose = _this$props4.onClose,
          rounded = _this$props4.rounded,
          closeIcon = _this$props4.closeIcon,
          closable = _this$props4.closable;
      return closable ? /*#__PURE__*/React.createElement(IconButton, {
        size: "small",
        outlined: false,
        bordered: false,
        rounded: rounded,
        onClick: function onClick() {
          return callCallback(onClose, false);
        },
        className: this.getClasses('nu-alert-close')
      }, closeIcon || /*#__PURE__*/React.createElement("span", {
        className: this.getClasses('nu-alert-close--icon')
      }, "\xD7")) : null;
    }
  }, {
    key: "alertChildren",
    get: function get() {
      return /*#__PURE__*/React.createElement("div", {
        className: this.getClasses('nu-alert-children')
      }, this.props.children);
    }
  }]);

  return Alert;
}(React.Component);

Alert.displayName = 'NuAlert';
Alert.defaultProps = _extends({
  visible: true
}, DEFAULT_PROPS);
Alert.propTypes = ALERT_PROP_TYPES;

var styles$f = {"nu-badge":"_1mmDS","nu-badge--inline":"_1roKQ","nu-badge--badge":"_18bV3","nu-badge--dot":"_2iR1P","nu-badge--bordered":"_1W1Kk","nu-badge--square":"_1p8mO","nu-badge--nopadding":"_10m0F","nu-badge--top":"_A3ZNY","nu-badge--left":"_3uSSi","nu-badge--right":"_1on6L","nu-badge--bottom":"_2WUga","nu-badge--right-top":"_1o0kR","nu-badge--left-top":"_NnFho","nu-badge--right-bottom":"_gX7rU","nu-badge--left-bottom":"_24Ik9","nu-badge--overlap":"_2Kj8C"};

var Badge = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Badge, _React$Component);

  function Badge(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.state = {
      id: uid()
    };
    return _this;
  }

  var _proto = Badge.prototype;

  _proto.getClasses = function getClasses(name) {
    var _this$props = this.props,
        dot = _this$props.dot,
        left = _this$props.left,
        square = _this$props.square,
        inline = _this$props.inline,
        bottom = _this$props.bottom,
        overlap = _this$props.overlap,
        bordered = _this$props.bordered,
        noPadding = _this$props.noPadding;

    switch (name) {
      case 'wrapper':
        return getModuleClasses(styles$f, "\n            nu-badge\n            " + (inline ? 'nu-badge--inline' : '') + "\n          ");

      case 'badge':
        return getModuleClasses(styles$f, "\n            nu-badge--badge\n            " + (dot ? 'nu-badge--dot' : '') + "\n            " + (square ? 'nu-badge--square' : '') + "\n            " + (bordered ? 'nu-badge--bordered' : '') + "\n            " + (noPadding ? 'nu-badge--nopadding' : '') + "\n            " + (inline ? '' : "\n              " + (overlap ? 'nu-badge--overlap' : '') + "\n              nu-badge--" + (left ? 'left' : 'right') + "\n              nu-badge--" + (bottom ? 'bottom' : 'top') + "\n              " + (left && !bottom ? 'nu-badge--left-top' : '') + "\n              " + (left && bottom ? 'nu-badge--left-bottom' : '') + "\n              " + (!left && !bottom ? 'nu-badge--right-top' : '') + "\n              " + (!left && bottom ? 'nu-badge--right-bottom' : '')) + "\n            \n          ");
    }
  };

  _proto.componentDidMount = function componentDidMount() {
    var _this$props2 = this.props,
        color = _this$props2.color,
        bgColor = _this$props2.bgColor,
        borderColor = _this$props2.borderColor;
    var elem = document.getElementById(this.state.id);
    setCSSVariable(elem, '--badge-bg-color', bgColor);
    setCSSVariable(elem, '--badge-text-color', color);
    setCSSVariable(elem, '--badge-border-color', borderColor);
  };

  _proto.render = function render() {
    var _this$props3 = this.props,
        style = _this$props3.style,
        className = _this$props3.className;
    return /*#__PURE__*/React.createElement("span", {
      style: style,
      id: this.state.id,
      className: this.getClasses('wrapper') + " " + className
    }, this.badgeChildren);
  };

  _createClass(Badge, [{
    key: "isContentNumber",
    get: function get() {
      return !isNaN(this.props.content);
    }
  }, {
    key: "content",
    get: function get() {
      var _this$props4 = this.props,
          content = _this$props4.content,
          max = _this$props4.max;
      return this.isContentNumber ? content > max ? max + "+" : content : content;
    }
  }, {
    key: "badgeContent",
    get: function get() {
      var _this$props5 = this.props,
          dot = _this$props5.dot,
          label = _this$props5.label,
          visible = _this$props5.visible;
      return visible ? /*#__PURE__*/React.createElement("span", {
        "aria-label": label,
        className: this.getClasses('badge')
      }, dot ? null : this.content) : null;
    }
  }, {
    key: "badgeChildren",
    get: function get() {
      var _this$props6 = this.props,
          inline = _this$props6.inline,
          left = _this$props6.left,
          children = _this$props6.children;
      var badgeChildren = passDownProp(children, this.props, 'dark');
      return inline && left ? /*#__PURE__*/React.createElement(React.Fragment, null, this.badgeContent, badgeChildren) : /*#__PURE__*/React.createElement(React.Fragment, null, badgeChildren, this.badgeContent);
    }
  }]);

  return Badge;
}(React.Component);

Badge.displayName = 'NuBadge';
Badge.defaultProps = _extends({
  visible: true
}, DEFAULT_PROPS);
Badge.propTypes = _extends({
  max: G_NUM,
  dot: G_BOOL,
  left: G_BOOL,
  inline: G_BOOL,
  bottom: G_BOOL,
  square: G_BOOL,
  content: G_NODE,
  overlap: G_BOOL,
  visible: G_BOOL,
  label: G_STRING,
  color: G_STRING,
  bordered: G_BOOL,
  noPadding: G_BOOL,
  bgColor: G_STRING,
  borderColor: G_STRING
}, DEFAULT_PROPS_TYPE);

var styles$g = {"nu-table":"_1QcJs","nu-table--light":"_3LJtX","nu-table--dark":"_piHct","nu-table--flat":"_XJSJ9","nu-table--inset":"_13Kbp","nu-table--outlined":"_17I3C","nu-table--table":"_1gluf","nu-table--toolbar":"_3DF_E","nu-table--header-row":"_3FEEB","nu-table--row":"_1dDpP","nu-table--cell":"_1g9-Z","nu-table--header-cell":"_2Tfgb","nu-table--dense":"_3Z8V1","nu-table--align-inherit":"_2gnwO","nu-table--align-center":"_3QUGl","nu-table--align-left":"_y_Im0","nu-table--align-right":"_2prGd","nu-table--align-justify":"_SFJMA","nu-table--align-vertical-middle":"_37Trm","nu-table--align-vertical-bottom":"_1eCBM","nu-table--align-vertical-top":"_2rq88"};

var Table = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Table, _React$Component);

  function Table() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Table.prototype;

  _proto.getAlignment = function getAlignment(align) {
    var alignValues = ['inherit', 'center', 'left', 'right', 'justify'];
    return alignValues.find(function (v) {
      return v === align;
    }) || alignValues[0];
  };

  _proto.getVerticalAlignment = function getVerticalAlignment(align) {
    var alignValues = ['top', 'middle', 'bottom'];
    return alignValues.find(function (v) {
      return v === align;
    }) || alignValues[1];
  };

  _proto.getClasses = function getClasses(elem, value) {
    if (value === void 0) {
      value = {};
    }

    var _this$props = this.props,
        dark = _this$props.dark,
        inset = _this$props.inset,
        flat = _this$props.flat,
        dense = _this$props.dense,
        outlined = _this$props.outlined;
    var _value = value,
        align = _value.align,
        verticalAlign = _value.verticalAlign;

    switch (elem) {
      case 'wrapper':
        return getModuleClasses(styles$g, "\n            nu-table\n            " + (flat ? 'nu-table--flat' : '') + "\n            " + (inset ? 'nu-table--inset' : '') + "\n            " + (dense ? 'nu-table--dense' : '') + "\n            nu-table--" + (dark ? 'dark' : 'light') + "\n            " + (outlined ? 'nu-table--outlined' : '') + "\n          ");

      case 'toolbar':
        return getModuleClasses(styles$g, 'nu-table--toolbar');

      case 'table':
        return getModuleClasses(styles$g, 'nu-table--table');

      case 'thr':
        return getModuleClasses(styles$g, 'nu-table--header-row');

      case 'tr':
        return getModuleClasses(styles$g, 'nu-table--row');

      case 'th':
        return getModuleClasses(styles$g, "\n            nu-table--header-cell\n            nu-table--align-" + this.getAlignment(align) + "\n          ");

      case 'td':
        return getModuleClasses(styles$g, "\n          nu-table--cell\n          nu-table--align-" + this.getAlignment(align) + "\n          nu-table--align-vertical-" + this.getVerticalAlignment(verticalAlign) + "\n        ");

      case 'tbody':
        return getModuleClasses(styles$g, 'nu-table--body');

      case 'thead':
        return getModuleClasses(styles$g, 'nu-table--header');

      case 'no-data':
        return getModuleClasses(styles$g, 'nu-table--cell nu-table--align-center');
    }
  };

  _proto.getTableHeadData = function getTableHeadData() {
    var _this = this;

    var headers = this.props.headers;
    return /*#__PURE__*/React.createElement("tr", {
      className: this.getClasses('thr')
    }, headers.map(function (header, i) {
      return /*#__PURE__*/React.createElement("th", {
        key: i,
        scope: "col",
        className: _this.getClasses('th', header) + " " + header.className
      }, header.text);
    }));
  };

  _proto.getTableRowData = function getTableRowData() {
    var _this2 = this;

    var _this$props2 = this.props,
        headers = _this$props2.headers,
        items = _this$props2.items;
    return items.map(function (item, i) {
      return /*#__PURE__*/React.createElement("tr", {
        key: i,
        className: _this2.getClasses('tr')
      }, headers.map(function (header, j) {
        return /*#__PURE__*/React.createElement("td", {
          key: j,
          scope: j === 0 ? 'row' : null,
          className: _this2.getClasses('td', header) + " " + header.className
        }, item[header.value]);
      }));
    });
  };

  _proto.render = function render() {
    var _this$props3 = this.props,
        items = _this$props3.items,
        style = _this$props3.style,
        headers = _this$props3.headers,
        children = _this$props3.children,
        className = _this$props3.className,
        noHeaders = _this$props3.noHeaders,
        noDataValue = _this$props3.noDataValue;
    return /*#__PURE__*/React.createElement("div", {
      style: style,
      className: this.getClasses('wrapper') + " " + className
    }, this.canSelfRender ? /*#__PURE__*/React.createElement("table", {
      className: this.getClasses('table')
    }, noHeaders ? null : /*#__PURE__*/React.createElement("thead", {
      className: this.getClasses('thead')
    }, this.tableToolbar ? /*#__PURE__*/React.createElement("tr", null, /*#__PURE__*/React.createElement("th", {
      colSpan: headers.length
    }, this.tableToolbar)) : null, this.getTableHeadData()), /*#__PURE__*/React.createElement("tbody", {
      className: this.getClasses('tbody')
    }, !items.length ? /*#__PURE__*/React.createElement("tr", null, /*#__PURE__*/React.createElement("td", {
      colSpan: headers.length,
      className: this.getClasses('no-data')
    }, noDataValue)) : this.getTableRowData())) : children);
  };

  _createClass(Table, [{
    key: "canSelfRender",
    get: function get() {
      var _this$props4 = this.props,
          headers = _this$props4.headers,
          items = _this$props4.items;
      return !!headers || !!items;
    }
  }, {
    key: "tableToolbar",
    get: function get() {
      var _this$props5 = this.props,
          description = _this$props5.description,
          actions = _this$props5.actions;
      return description || actions ? /*#__PURE__*/React.createElement("div", {
        className: this.getClasses('toolbar')
      }, description, /*#__PURE__*/React.createElement(Spacer, null), actions) : null;
    }
  }]);

  return Table;
}(React.Component);

Table.displayName = 'NuTable';
Table.defaultProps = _extends({
  items: [],
  headers: [],
  noDataValue: 'No data found'
}, DEFAULT_PROPS);
Table.propTypes = _extends({
  flat: G_BOOL,
  items: G_ARR,
  dense: G_BOOL,
  headers: G_ARR,
  actions: G_NODE,
  outlined: G_BOOL,
  noHeaders: G_BOOL,
  description: G_NODE
}, DEFAULT_PROPS_TYPE);

var Form = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Form, _React$Component);

  function Form(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.state = {};
    console.log(props.children);
    return _this;
  }

  var _proto = Form.prototype;

  _proto.handleChange = function handleChange(_ref) {
    var _this$setState;

    var id = _ref.id,
        value = _ref.value;
    this.setState((_this$setState = {}, _this$setState[id] = value, _this$setState));
  };

  _proto.handleFormChange = function handleFormChange(e) {};

  _proto.handleSubmit = function handleSubmit(e) {};

  _proto.render = function render() {
    var _this2 = this;

    var children = this.props.children;
    var formChildren = Children.map(children, function (child) {
      return cloneElement(child, _extends(_extends({}, child.props), {}, {
        onChange: function onChange(e) {
          return _this2.handleChange(e);
        }
      }));
    });
    return /*#__PURE__*/React.createElement("form", {
      onSubmit: this.handleSubmit,
      onChange: this.handleFormChange
    }, formChildren);
  };

  return Form;
}(React.Component);

var Radio = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Radio, _React$Component);

  function Radio() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Radio.prototype;

  _proto.handleChange = function handleChange(_ref) {
    var event = _ref.event,
        id = _ref.id,
        checked = _ref.checked;
    var _this$props = this.props,
        value = _this$props.value,
        onChange = _this$props.onChange;
    callCallback(onChange, {
      event: event,
      id: id,
      checked: checked,
      value: value
    });
  };

  _proto.render = function render() {
    var _this = this;

    return /*#__PURE__*/React.createElement(SelectionControl, _extends({
      type: "radio"
    }, this.props, {
      onChange: function onChange(e) {
        return _this.handleChange(e);
      }
    }));
  };

  return Radio;
}(React.Component);

Radio.displayName = 'NuRadio';
Radio.defaultProps = DEFAULT_PROPS;
Radio.propTypes = SELECTION_CONTROL_PROP_TYPES;

var radioStyles = {"nu-radio-group":"_23EQ4","nu-radio-group--vertical":"_3U_xV"};

var RadioGroup = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(RadioGroup, _React$Component);

  function RadioGroup(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.state = {
      id: "" + (props.id || uid()),
      active: _this.props.value,
      key: 1
    };
    return _this;
  }

  var _proto = RadioGroup.prototype;

  _proto.handleChange = function handleChange(_ref, childOnChange) {
    var event = _ref.event,
        checked = _ref.checked,
        value = _ref.value;
    var id = this.state.id;
    var onChange = this.props.onChange;

    if (checked) {
      this.setState({
        active: value
      });
      this.setState({
        key: this.state.key + 1
      });
    }

    callCallback(onChange, {
      event: event,
      id: id,
      value: value
    });
    callCallback(childOnChange, {
      event: event,
      checked: checked,
      value: value
    });
  };

  _proto.getClasses = function getClasses() {
    return getModuleClasses(radioStyles, "\n        nu-radio-group\n        " + (this.props.vertical ? 'nu-radio-group--vertical' : '') + "\n      ");
  };

  _proto.render = function render() {
    var _this2 = this;

    var _this$props = this.props,
        style = _this$props.style,
        children = _this$props.children,
        className = _this$props.className;
    var radios = passDownProp(Children.map(children, function (child) {
      if (child.type === Radio) {
        var _child$props = child.props,
            value = _child$props.value,
            _onChange = _child$props.onChange;
        return cloneElement(child, {
          checked: _this2.state.active === value,
          onChange: function onChange(e) {
            return _this2.handleChange(e, _onChange);
          }
        });
      }
    }), this.props, ['dark', 'color', 'disabled']);
    return /*#__PURE__*/React.createElement("div", {
      style: style,
      key: this.state.key,
      className: this.getClasses() + " " + className
    }, radios);
  };

  return RadioGroup;
}(React.Component);

RadioGroup.displayName = 'NuRadioGroup';
RadioGroup.defaultProps = _extends({
  vertical: false
}, DEFAULT_PROPS);
RadioGroup.propTypes = _extends({
  id: G_ANY,
  value: G_ANY,
  color: G_STRING,
  disabled: G_BOOL,
  vertical: G_BOOL,
  onChange: G_FUNC,
  children: G_NODE.isRequired
}, DEFAULT_PROPS_TYPE);

var styles$h = {"nu-text-field-wrapper":"_2xbD-","nu-text-field-container":"_fWLwS","nu-text-field":"_U6nBC","nu-text-field-text-area":"_31Os5","nu-text-field-container--disabled":"_2aC8_","nu-text-field-container--dense":"_2P-4r","nu-text-field--light":"_2nHt_","nu-text-field--dark":"_1a45g","nu-text-field--disabled":"_2EcQN","nu-text-field--bordered":"_2sOuT","nu-text-field--rounded":"_2zBZA","nu-text-field-container--rounded":"_17ek-","nu-text-field--outlined":"_26ECL","nu-text-field-label":"_Mk5N_","nu-text-field-caption-wrapper":"_3t8tT","nu-text-field-error":"_1xCHA","nu-text-field-hint":"_2Lw0g","nu-text-field-counter":"_2MZzb","nu-text-field-loading":"_3VWSl","nu-text-field-prepend":"_2mihT","nu-text-field-append":"_1dTNN"};

var TextField = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(TextField, _React$Component);

  function TextField(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    var value = props.value,
        id = props.id;
    _this.state = {
      valid: true,
      focused: false,
      errorMessage: '',
      value: value || '',
      id: "" + (id || uid()),
      count: (value || '').length
    };
    return _this;
  }

  var _proto = TextField.prototype;

  _proto.validate = function validate(value) {
    var valid = true;
    var errorMessage = 'Invalid';
    var _this$props = this.props,
        _this$props$rules = _this$props.rules,
        rules = _this$props$rules === void 0 ? [] : _this$props$rules,
        counter = _this$props.counter;
    var ruleLength = rules.length;

    for (var i = 0; i < ruleLength; i++) {
      var isValid = rules[i](value);

      if (isValid !== true) {
        errorMessage = isValid;
        valid = false;
        break;
      }
    }

    if (counter !== undefined && value.length > counter) {
      valid = false;
      errorMessage = "Max " + counter + " characters";
    }

    this.setState({
      valid: valid
    });
    this.setState({
      errorMessage: errorMessage
    });
  };

  _proto.handleChange = function handleChange(event) {
    var _this$state = this.state,
        id = _this$state.id,
        valid = _this$state.valid;
    var _this$props2 = this.props,
        onChange = _this$props2.onChange,
        hideExtra = _this$props2.hideExtra,
        uncontrolled = _this$props2.uncontrolled;
    var value = event.target.value;
    var count = value.length;

    if (!hideExtra) {
      this.validate(value);
    }

    if (!uncontrolled) {
      this.setState({
        value: value
      });
    }

    this.setState({
      count: count
    });
    callCallback(onChange, {
      event: event,
      id: id,
      value: value,
      valid: valid
    });
  };

  _proto.handleFocus = function handleFocus(event) {
    var id = this.state.id;
    var onFocus = this.props.onFocus;
    this.setState({
      focused: true
    });
    callCallback(onFocus, {
      event: event,
      id: id
    });
  };

  _proto.handleBlur = function handleBlur(event) {
    var id = this.state.id;
    var onBlur = this.props.onBlur;
    this.setState({
      focused: false
    });
    callCallback(onBlur, {
      event: event,
      id: id
    });
  };

  _proto.getClasses = function getClasses(classType, flag) {
    var _this$props3 = this.props,
        dark = _this$props3.dark,
        dense = _this$props3.dense,
        rounded = _this$props3.rounded,
        readonly = _this$props3.readonly,
        outlined = _this$props3.outlined,
        bordered = _this$props3.bordered,
        disabled = _this$props3.disabled;

    if (classType === 'container') {
      return getModuleClasses(styles$h, "\n            nu-text-field-container \n            " + (dense ? 'nu-text-field-container--dense' : '') + "\n            " + (rounded ? 'nu-text-field-container--rounded' : '') + "\n            " + (disabled ? 'nu-text-field-container--disabled' : '') + "\n            ");
    } else if (classType === 'text-field') {
      return getModuleClasses(styles$h, "\n            nu-text-field\n            nu-text-field--" + (dark ? 'dark' : 'light') + "\n            " + (rounded ? 'nu-text-field--rounded' : '') + "\n            " + (outlined ? 'nu-text-field--outlined' : '') + "\n            " + (bordered ? 'nu-text-field--bordered' : '') + "\n            " + (readonly ? 'nu-text-field--readonly' : '') + "\n            " + (this.isDisabled ? 'nu-text-field--disabled' : '') + "\n            ");
    } else if (classType === 'error') {
      return getModuleClasses(styles$h, "nu-text-field-" + (flag ? 'hint' : 'error'));
    } else {
      return getModuleClasses(styles$h, "nu-text-field-" + classType);
    }
  };

  _proto.componentWillUpdate = function componentWillUpdate(props, state) {
    var value = props.value,
        uncontrolled = props.uncontrolled;

    if (state.value !== value && uncontrolled) {
      this.setState({
        value: value
      });
    }
  };

  _proto.render = function render() {
    var _this$props4 = this.props,
        dark = _this$props4.dark,
        hint = _this$props4.hint,
        label = _this$props4.label,
        style = _this$props4.style,
        append = _this$props4.append,
        prepend = _this$props4.prepend,
        counter = _this$props4.counter,
        loading = _this$props4.loading,
        disabled = _this$props4.disabled,
        className = _this$props4.className,
        hideExtra = _this$props4.hideExtra;
    var _this$state2 = this.state,
        id = _this$state2.id,
        valid = _this$state2.valid,
        count = _this$state2.count,
        errorMessage = _this$state2.errorMessage;
    return /*#__PURE__*/React.createElement("div", {
      style: style,
      className: this.getClasses('wrapper') + " " + className
    }, prepend ? /*#__PURE__*/React.createElement("div", {
      className: "" + this.getClasses('prepend')
    }, prepend) : null, /*#__PURE__*/React.createElement("div", {
      className: "" + this.getClasses('container')
    }, this.canShowLabel ? /*#__PURE__*/React.createElement("label", {
      htmlFor: id,
      className: "" + this.getClasses('label')
    }, /*#__PURE__*/React.createElement(Subtitle1, {
      secondary: true,
      dark: dark,
      component: "div",
      disabled: disabled
    }, label)) : null, loading ? /*#__PURE__*/React.createElement(ProgressLinear, {
      fillHeight: true,
      height: 2,
      dark: dark,
      indeterminate: true,
      className: "" + this.getClasses('loading')
    }) : null, this.input, hideExtra && !counter ? null : /*#__PURE__*/React.createElement("div", {
      className: "" + this.getClasses('caption-wrapper', valid)
    }, hideExtra ? hint : /*#__PURE__*/React.createElement(Caption, {
      secondary: true,
      dark: dark,
      component: "div",
      className: "" + this.getClasses('error', valid)
    }, valid ? hint : errorMessage), counter ? /*#__PURE__*/React.createElement(Caption, {
      secondary: true,
      dark: dark,
      component: "div",
      className: "" + this.getClasses('counter')
    }, count, "/", counter) : null)), append ? /*#__PURE__*/React.createElement("div", {
      className: "" + this.getClasses('append')
    }, append) : null);
  };

  _createClass(TextField, [{
    key: "input",
    get: function get() {
      var _this2 = this;

      var _this$props5 = this.props,
          tag = _this$props5.tag,
          type = _this$props5.type,
          name = _this$props5.name,
          width = _this$props5.width,
          height = _this$props5.height,
          readonly = _this$props5.readonly,
          autofocus = _this$props5.autofocus,
          inputStyles = _this$props5.inputStyles,
          placeholder = _this$props5.placeholder;
      var _this$state3 = this.state,
          id = _this$state3.id,
          value = _this$state3.value;
      var className = this.getClasses('text-field') + " " + (tag === 'textarea' ? this.getClasses('text-area') : '');
      var events = pickKeys(this.props, ['onInput', 'onKeyUp', 'onKeyDown']);

      var inputProps = _extends({
        id: id,
        className: className,
        type: type,
        name: name,
        value: value,
        readOnly: readonly,
        autoFocus: autofocus,
        placeholder: placeholder,
        disabled: this.isDisabled,
        onBlur: function onBlur(e) {
          return _this2.handleBlur(e);
        },
        onFocus: function onFocus(e) {
          return _this2.handleFocus(e);
        },
        onChange: function onChange(e) {
          return _this2.handleChange(e);
        },
        tabIndex: this.isDisabled ? -1 : undefined,
        style: _extends({
          width: width + "px",
          height: height + "px",
          minHeight: height + "px"
        }, inputStyles)
      }, events);

      return createElement(tag, inputProps);
    }
  }, {
    key: "canShowLabel",
    get: function get() {
      var value = this.state.value;
      var placeholder = this.props.placeholder;
      return !placeholder && !value;
    }
  }, {
    key: "isDisabled",
    get: function get() {
      var _this$props6 = this.props,
          loading = _this$props6.loading,
          disabled = _this$props6.disabled;
      return loading ? true : disabled;
    }
  }]);

  return TextField;
}(React.Component);

TextField.displayName = 'NuTextField';
TextField.defaultProps = _extends({
  type: 'text',
  tag: 'input'
}, DEFAULT_PROPS);
TextField.propTypes = _extends(_extends({}, TEXT_FIELD_PROP_TYPES), DEFAULT_PROPS_TYPE);

var TextArea = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(TextArea, _React$Component);

  function TextArea(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    var dense = props.dense,
        height = props.height;
    var defaultHeight = dense ? 32 : 40;
    _this.minHeight = Math.max(height || 0, defaultHeight);
    return _this;
  }

  var _proto = TextArea.prototype;

  _proto.onInput = function onInput(e, prop) {
    if (!this.props.autoExpand) return;
    var textarea = e.target;
    var outerHeight = parseInt(window.getComputedStyle(textarea).height, 10);
    var diff = outerHeight - textarea.clientHeight;
    textarea.style.height = 0;
    textarea.style.height = Math.max(this.minHeight, textarea.scrollHeight + diff) + "px";
    callCallback(this.props[prop], e);
  };

  _proto.render = function render() {
    var _this2 = this;

    var _this$props = this.props,
        autoExpand = _this$props.autoExpand,
        inputStyles = _this$props.inputStyles,
        others = _objectWithoutPropertiesLoose(_this$props, ["autoExpand", "inputStyles"]);

    return /*#__PURE__*/React.createElement(TextField, _extends({
      tag: "textarea",
      onInput: function onInput(e) {
        return _this2.onInput(e, 'onInput');
      },
      onKeyDown: function onKeyDown(e) {
        return _this2.onInput(e, 'onKeyDown');
      },
      inputStyles: _extends({
        resize: autoExpand ? 'none' : null
      }, inputStyles)
    }, others));
  };

  return TextArea;
}(React.Component);

TextArea.displayName = 'NuTextarea';

var Switch = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Switch, _React$Component);

  function Switch() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Switch.prototype;

  _proto.render = function render() {
    return /*#__PURE__*/React.createElement(SelectionControl, _extends({
      type: "switch"
    }, this.props));
  };

  return Switch;
}(React.Component);

Switch.displayName = 'NuSwitch';
Switch.defaultProps = DEFAULT_PROPS;
Switch.propTypes = SELECTION_CONTROL_PROP_TYPES;

var Slider = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Slider, _React$Component);

  function Slider() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Slider.prototype;

  _proto.render = function render() {
    return /*#__PURE__*/React.createElement("div", null, "Slider");
  };

  return Slider;
}(React.Component);

var Checkbox = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Checkbox, _React$Component);

  function Checkbox() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Checkbox.prototype;

  _proto.handleChange = function handleChange(_ref) {
    var event = _ref.event,
        id = _ref.id,
        checked = _ref.checked;
    var onChange = this.props.onChange;
    callCallback(onChange, {
      event: event,
      id: id,
      value: checked
    });
  };

  _proto.render = function render() {
    var _this = this;

    return /*#__PURE__*/React.createElement(SelectionControl, _extends({}, this.props, {
      type: "checkbox",
      onChange: function onChange(e) {
        return _this.handleChange(e);
      }
    }));
  };

  return Checkbox;
}(React.Component);

Checkbox.displayName = 'NuCheckbox';
Checkbox.defaultProps = DEFAULT_PROPS;
Checkbox.propTypes = SELECTION_CONTROL_PROP_TYPES;

var radioStyles$1 = {"nu-radio":"_2g7Fh","nu-radio--light":"_37QLn","nu-radio--dark":"_nacDr","nu-radio--disabled":"_24Y84","nu-radio-label":"_30uF4","nu-radio-label--disabled":"_1EeO5"};

var checkboxStyles = {"nu-checkbox":"_2DIew","nu-checkbox--light":"_1u_cB","nu-checkbox--dark":"_a77__","checkbox-check":"_JRLap","checkbox-uncheck":"_BF55r","nu-checkbox--disabled":"_2qmYE","nu-checkbox-label":"_aIUGu","nu-checkbox-label--disabled":"_3QbeY"};

var switchStyles = {"nu-switch":"_AQLzt","nu-switch--light":"_1zQ0s","nu-switch--dark":"_BQ4h8","nu-switch--disabled":"_C4xuu","nu-switch-label":"_2hoJO"};

var SelectionControl = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(SelectionControl, _React$Component);

  function SelectionControl(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.state = {
      type: props.type,
      id: "" + (props.id || uid()),
      isChecked: props.checked || false,
      styles: {
        radioStyles: radioStyles$1,
        switchStyles: switchStyles,
        checkboxStyles: checkboxStyles
      }
    };
    return _this;
  }

  var _proto = SelectionControl.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var _this$props = this.props,
        color = _this$props.color,
        disabled = _this$props.disabled;
    var elem = document.getElementById(this.state.id);

    if (!disabled) {
      setCSSVariable(elem, '--selector-bg', color);
    }
  };

  _proto.handleChange = function handleChange(event) {
    var isChecked = event.target.checked;
    this.setState({
      isChecked: isChecked
    });
    var id = this.state.id;
    var onChange = this.props.onChange;
    callCallback(onChange, {
      event: event,
      id: id,
      checked: isChecked
    });
  };

  _proto.getInputType = function getInputType(type) {
    return ['radio', 'checkbox', 'switch'].find(function (i) {
      return i === type;
    }) || 'checkbox';
  };

  _proto.getClasses = function getClasses(elem) {
    var _this$props2 = this.props,
        dark = _this$props2.dark,
        disabled = _this$props2.disabled;
    var _this$state = this.state,
        inputType = _this$state.type,
        styles = _this$state.styles;
    var type = this.getInputType(inputType);
    var style = styles[type + "Styles"];
    var disabledInputClass = disabled ? "nu-" + type + "--disabled" : '';
    var disabledLabelClass = disabled ? "nu-" + type + "-label--disabled" : 'cursor-pointer';

    switch (elem) {
      case 'container':
        return getModuleClasses({}, 'selection-control-container');

      case 'input':
        return getModuleClasses(style, "\n            nu-" + type + "\n            " + disabledInputClass + "\n            nu-" + type + "--" + (dark ? 'dark' : 'light') + "\n          ");

      case 'label':
        return getModuleClasses(style, "\n            nu-" + type + "-label\n            " + disabledLabelClass + "\n          ");
    }
  };

  _proto.render = function render() {
    var _this2 = this;

    var _this$props3 = this.props,
        dark = _this$props3.dark,
        style = _this$props3.style,
        label = _this$props3.label,
        disabled = _this$props3.disabled,
        className = _this$props3.className;
    var _this$state2 = this.state,
        stateId = _this$state2.id,
        type = _this$state2.type,
        isChecked = _this$state2.isChecked;
    var inputType = this.getInputType(type);
    var attrs = pickKeys(this.props, ['name', 'value', 'required', 'disabled']);
    var events = pickKeys(this.props, MOUSE_EVENTS);
    return /*#__PURE__*/React.createElement("div", {
      style: style,
      className: this.getClasses('container') + " " + className
    }, /*#__PURE__*/React.createElement("input", _extends({}, attrs, events, {
      id: stateId,
      checked: isChecked,
      className: this.getClasses('input'),
      onChange: function onChange(e) {
        return _this2.handleChange(e);
      },
      type: inputType === 'switch' ? 'checkbox' : inputType
    })), /*#__PURE__*/React.createElement("label", {
      htmlFor: stateId,
      className: this.getClasses('label')
    }, /*#__PURE__*/React.createElement(Body1, {
      dark: dark,
      disabled: disabled
    }, label)));
  };

  return SelectionControl;
}(React.Component);

SelectionControl.displayName = 'NuSelectionControl';
SelectionControl.defaultProps = DEFAULT_PROPS;
SelectionControl.propTypes = _extends(_extends({}, SELECTION_CONTROL_PROP_TYPES), {}, {
  type: SELECTION_CONTROL_TYPES.isRequired
});

export { Alert, Avatar$1 as Avatar, Badge, Body1, Body2, Button, Caption, Card, CardAction, CardContent, CardHeader, CardMedia, Carousel, CarouselItem, Checkbox, Chip, Dialog, Divider, Fab, Fade, Form, Grow, H1, H2, H3, H4, H5, H6, IconButton, List, ListItem, ListItemGroup, Overline, Parallax$1 as Parallax, ProgressCircular, ProgressLinear, Radio, RadioGroup, SelectionControl, Slide, SlideCarousel, Slider, Spacer, Subtitle1, Subtitle2, Switch, Tab, TabItem, TabItems, Table, Tabs, TextArea, TextField, ToggleButton, ToggleButtonGroup, Tooltip, Typography, detectElementInDOM, overrideThemeVariables, withClickOutside, withImage, withResize };
//# sourceMappingURL=index.modern.js.map
